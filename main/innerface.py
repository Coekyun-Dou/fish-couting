# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'C:\Users\Duuuzx\fish-couting\main\innerfaceUi.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import threading
import mss
# res_rc是qrc文件转成py文件生成的
# 生成的指令：pyrcc5 your_resources.qrc -o res_rc.py
import res_rc
#这个是用来引入DetThread这个进程的
# class DetThread(threading.Thread):
#     def __init__(self, model, input_data, output_queue):
#         threading.Thread.__init__(self)
#         self.model = model
#         self.input_data = input_data
#         self.output_queue = output_queue
#
#     def run(self):
#         # 执行目标检测任务
#         result = self.model(self.input_data)
#         self.output_queue.put(result)  # 将结果放入队列以供主线程使用


from PyQt5.QtCore import QResource, Qt, QTimer
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog, QMenu, QAction
from PyQt5.QtCore import Qt, QPoint, QTimer, QThread, pyqtSignal
from PyQt5.QtGui import QImage, QPixmap, QPainter, QIcon, QPalette, QBrush
from MouseLabel import Label_click_Mouse

import numpy as np
import sys
import json
import torch
import torch.backends.cudnn as cudnn
import os
import time
import cv2
import cv2 as CV2


from MouseLabel import Label_click_Mouse
from models.experimental import attempt_load
from test.captureScreen import boxScreen
from utils.augmentations import letterbox
from utils.datasets import LoadImages, LoadWebcam
from utils.CustomMessageBox import MessageBox
from utils.general import check_img_size, check_requirements, check_imshow, colorstr, non_max_suppression, \
    apply_classifier, scale_coords, xyxy2xywh, strip_optimizer, set_logging, increment_path
# from utils.plots import colors, plot_one_box, plot_one_box_PIL
from utils.torch_utils import select_device
from dialog.rtsp_win import Window


img_src = np.zeros((1280, 720, 3), np.uint8)
COLORS = [
    (0, 0, 255), (255, 0, 0), (0, 255, 0), (255, 255, 0), (0, 255, 255),
    (255, 0, 255), (192, 192, 192), (128, 128, 128), (128, 0, 0),
    (128, 128, 0), (0, 128, 0)]
LABELS = ['fish']
img_src = cv2.imread('F:\science_study\sea win eletronic detect\data\selfCreate\images\\40.jpg') #指向OpenCv对象
tclose=False
truning=False
tsleep=False

class YOLOv8Detector:
    def __init__(self, conf=0.25, iou=0.45):
        self.model = None
        self.conf = conf
        self.iou = iou
        self.class_names = []
        np.random.seed(42)  # 固定颜色生成

    def init_model(self, model_path):
        """ 初始化YOLOv8模型 """
        self.model = YOLO(model_path)
        self.model.fuse()
        self.class_names = list(self.model.names.values())
        self.COLORS = np.random.uniform(0, 255, size=(len(self.class_names), 3))

    def detect(self, img):
        """ 执行检测并返回带标注图像和统计信息 """
        results = self.model.predict(
            source=img,
            imgsz=640,
            conf=self.conf,
            iou=self.iou,
            device='cpu',
            verbose=False
        )
        return self._parse_results(img, results[0])

    def _parse_results(self, orig_img, results):
        """ 解析检测结果 """
        # 获取检测框数据
        boxes = results.boxes.cpu().numpy()

        # 生成统计字典
        statistic_dic = {name: 0 for name in self.class_names}
        for box in boxes:
            cls_id = int(box.cls[0])
            statistic_dic[self.class_names[cls_id]] += 1

        # 生成带标注图像（两种方式）
        # 方式1：使用YOLOv8内置绘图方法（快速）
        # annotated_img = results.plot()

        # 方式2：自定义绘制（更灵活）
        annotated_img = orig_img.copy()
        for box in boxes:
            x1, y1, x2, y2 = map(int, box.xyxy[0])
            cls_id = int(box.cls[0])
            conf = box.conf[0]
            self._draw_box(annotated_img, x1, y1, x2, y2,
                           self.class_names[cls_id], conf, cls_id)

        return annotated_img, statistic_dic

    def _draw_box(self, img, x1, y1, x2, y2, label, conf, cls_id):
        """ 自定义绘制检测框 """
        color = self.COLORS[cls_id % len(self.COLORS)].tolist()
        # 绘制矩形框
        cv2.rectangle(img, (x1, y1), (x2, y2), color, 3)
        # 绘制标签背景
        (tw, th), _ = cv2.getTextSize(f"{label} {conf:.2f}",
                                      cv2.FONT_HERSHEY_SIMPLEX, 0.8, 2)
        cv2.rectangle(img, (x1, y1 - th - 10), (x1 + tw, y1 - 10), color, -1)
        # 绘制文字
        cv2.putText(img, f"{label} {conf:.2f}", (x1, y1 - 15),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.8, (255, 255, 255), 2)


class DetThread(QThread):
    send_img = pyqtSignal(np.ndarray)  # 带标注图像
    send_raw = pyqtSignal(np.ndarray)  # 原始图像
    send_statistic = pyqtSignal(dict)  # 统计信息

    def __init__(self):
        super().__init__()
        self.detector = YOLOv8Detector()  # 替换为YOLOv8检测器
        self.source = '0'  # 视频源
        self.conf = 0.25
        self.iou = 0.45

    def run(self):
        # 初始化检测器
        self.detector.conf = self.conf
        self.detector.iou = self.iou
        self.detector.init_model('./pt/yolov8_model.pt')  # 修改模型路径

        cap = cv2.VideoCapture(self.source)
        while True:
            ret, frame = cap.read()
            if not ret: break

            # 执行YOLOv8检测
            annotated_img, statistic = self.detector.detect(frame)

            # 发送信号
            self.send_raw.emit(frame)  # 原始帧
            self.send_img.emit(annotated_img)  # 带标注帧
            self.send_statistic.emit(statistic)  # 统计信息

class Ui_mainWindow(object):
    def setupUi(self, mainWindow):
        mainWindow.setObjectName("mainWindow")
        mainWindow.resize(1085, 808)
        mainWindow.setMouseTracking(True)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/img/icon/图片1.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        mainWindow.setWindowIcon(icon)
        mainWindow.setStyleSheet("#mainWindow{border:none;}")
        self.centralwidget = QtWidgets.QWidget(mainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.groupBox_18 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_18.setStyleSheet("#groupBox_18{border-image: url(:D:\\\\deeplearning\\\\fish counting\\\\icons\\\\fish.jpg);\n"
"border: 0px solid #42adff;\n"
"border-radius:5px;}")
        self.groupBox_18.setTitle("")
        self.groupBox_18.setObjectName("groupBox_18")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.groupBox_18)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setSpacing(0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.groupBox = QtWidgets.QGroupBox(self.groupBox_18)
        self.groupBox.setMinimumSize(QtCore.QSize(0, 45))
        self.groupBox.setMaximumSize(QtCore.QSize(16777215, 45))
        self.groupBox.setStyleSheet("#groupBox{\n"
"background-color: rgba(75, 75, 75, 200);\n"
"border: 0px solid #42adff;\n"
"border-left: 0px solid rgba(29, 83, 185, 255);\n"
"border-right: 0px solid rgba(29, 83, 185, 255);\n"
"border-bottom: 1px solid rgba(200, 200, 200,100);\n"
";\n"
"border-radius:0px;}")
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.groupBox)
        self.horizontalLayout.setContentsMargins(-1, 0, -1, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_7 = QtWidgets.QLabel(self.groupBox)
        self.label_7.setMinimumSize(QtCore.QSize(40, 40))
        self.label_7.setMaximumSize(QtCore.QSize(40, 40))
        self.label_7.setStyleSheet("image: url(:/img/icon/conan.png);\n"
"image: url(:/images/icons/logo.png);")
        self.label_7.setText("")
        self.label_7.setObjectName("label_7")
        self.horizontalLayout.addWidget(self.label_7)
        self.label_4 = QtWidgets.QLabel(self.groupBox)
        self.label_4.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 24px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
        self.label_4.setObjectName("label_4")
        self.horizontalLayout.addWidget(self.label_4)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setSpacing(0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.minButton = QtWidgets.QPushButton(self.groupBox)
        self.minButton.setMinimumSize(QtCore.QSize(50, 28))
        self.minButton.setMaximumSize(QtCore.QSize(50, 28))
        self.minButton.setStyleSheet("QPushButton {\n"
"\n"
"    image: url(:/icons/icons/最小化.png);\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-radius: 0px;\n"
"background-color: rgba(223, 223, 223, 0);}\n"
"QPushButton::focus{outline: none;}\n"
"QPushButton::hover {\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-radius: 0px;\n"
"background-color: rgba(223, 223, 223, 150);}")
        self.minButton.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/img/icon/最小化.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.minButton.setIcon(icon1)
        self.minButton.setObjectName("minButton")
        self.horizontalLayout_5.addWidget(self.minButton)
        self.maxButton = QtWidgets.QPushButton(self.groupBox)
        self.maxButton.setMinimumSize(QtCore.QSize(50, 28))
        self.maxButton.setMaximumSize(QtCore.QSize(50, 28))
        self.maxButton.setStyleSheet("QPushButton {\n"
"    image: url(:/icons/icons/最大化.png);\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-radius: 0px;\n"
"background-color: rgba(223, 223, 223, 0);}\n"
"QPushButton::focus{outline: none;}\n"
"QPushButton::hover {\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-radius: 0px;\n"
"background-color: rgba(223, 223, 223, 150);}")
        self.maxButton.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/img/icon/正方形.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon2.addPixmap(QtGui.QPixmap(":/img/icon/还原.png"), QtGui.QIcon.Active, QtGui.QIcon.On)
        icon2.addPixmap(QtGui.QPixmap(":/img/icon/还原.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.maxButton.setIcon(icon2)
        self.maxButton.setCheckable(True)
        self.maxButton.setObjectName("maxButton")
        self.horizontalLayout_5.addWidget(self.maxButton)
        self.closeButton = QtWidgets.QPushButton(self.groupBox)
        self.closeButton.setMinimumSize(QtCore.QSize(50, 28))
        self.closeButton.setMaximumSize(QtCore.QSize(50, 28))
        self.closeButton.setStyleSheet("QPushButton {\n"
"    image: url(:/icons/icons/关闭.png);\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-radius: 0px;\n"
"background-color: rgba(223, 223, 223, 0);}\n"
"QPushButton::focus{outline: none;}\n"
"QPushButton::hover {\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-radius: 0px;\n"
"background-color: rgba(223, 223, 223, 150);}")
        self.closeButton.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/img/icon/关闭.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.closeButton.setIcon(icon3)
        self.closeButton.setObjectName("closeButton")
        self.horizontalLayout_5.addWidget(self.closeButton)
        self.horizontalLayout.addLayout(self.horizontalLayout_5)
        self.verticalLayout_6.addWidget(self.groupBox)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setSpacing(0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.groupBox_8 = QtWidgets.QGroupBox(self.groupBox_18)
        self.groupBox_8.setMinimumSize(QtCore.QSize(320, 0))
        self.groupBox_8.setMaximumSize(QtCore.QSize(320, 16777215))
        self.groupBox_8.setStyleSheet("#groupBox_8{\n"
"background-color: rgba(75, 75, 75, 200);\n"
"border: 0px solid #42adff;\n"
"border-radius:0px;}\n"
"")
        self.groupBox_8.setTitle("")
        self.groupBox_8.setObjectName("groupBox_8")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.groupBox_8)
        self.verticalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_8.setSpacing(11)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.groupBox_2 = QtWidgets.QGroupBox(self.groupBox_8)
        self.groupBox_2.setMinimumSize(QtCore.QSize(0, 42))
        self.groupBox_2.setMaximumSize(QtCore.QSize(16777215, 42))
        self.groupBox_2.setStyleSheet("#groupBox_2{\n"
"border: 0px solid #42adff;\n"
"border-bottom: 1px solid rgba(200, 200, 200,100);\n"
"border-radius:0px;}")
        self.groupBox_2.setTitle("")
        self.groupBox_2.setObjectName("groupBox_2")
        self.horizontalLayout_35 = QtWidgets.QHBoxLayout(self.groupBox_2)
        self.horizontalLayout_35.setContentsMargins(11, 0, 11, 0)
        self.horizontalLayout_35.setObjectName("horizontalLayout_35")
        self.label_5 = QtWidgets.QLabel(self.groupBox_2)
        self.label_5.setMinimumSize(QtCore.QSize(0, 0))
        self.label_5.setMaximumSize(QtCore.QSize(16777215, 40))
        self.label_5.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 22px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"\n"
"}\n"
"")
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_35.addWidget(self.label_5)
        spacerItem1 = QtWidgets.QSpacerItem(37, 39, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_35.addItem(spacerItem1)
        self.verticalLayout_8.addWidget(self.groupBox_2)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setContentsMargins(11, -1, 11, -1)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_3 = QtWidgets.QLabel(self.groupBox_8)
        self.label_3.setMinimumSize(QtCore.QSize(0, 28))
        self.label_3.setMaximumSize(QtCore.QSize(80, 16777215))
        self.label_3.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 18px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_2.addWidget(self.label_3)
        self.comboBox = QtWidgets.QComboBox(self.groupBox_8)
        self.comboBox.setMinimumSize(QtCore.QSize(0, 28))
        self.comboBox.setStyleSheet("QComboBox QAbstractItemView {\n"
"font-family: \"Microsoft YaHei\";\n"
"font-size: 16px;\n"
"background:rgba(200, 200, 200,150);\n"
"selection-background-color: rgba(200, 200, 200,50);\n"
"color: rgb(218, 218, 218);\n"
"outline:none;\n"
"border:none;}\n"
"QComboBox{\n"
"font-family: \"Microsoft YaHei\";\n"
"font-size: 16px;\n"
"color: rgb(218, 218, 218);\n"
"border-width:0px;\n"
"border-color:white;\n"
"border-style:solid;\n"
"background-color: rgba(200, 200, 200,0);}\n"
"\n"
"QComboBox::drop-down {\n"
"margin-top:8;\n"
"height:20;\n"
"background:rgba(255,255,255,0);\n"
"border-image: url(:/img/icon/下拉_白色.png);\n"
"}\n"
"")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.horizontalLayout_2.addWidget(self.comboBox)
        self.verticalLayout_8.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setContentsMargins(11, -1, 0, -1)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.label_10 = QtWidgets.QLabel(self.groupBox_8)
        self.label_10.setMaximumSize(QtCore.QSize(80, 16777215))
        self.label_10.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 18px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
        self.label_10.setObjectName("label_10")
        self.horizontalLayout_9.addWidget(self.label_10)
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.groupBox_5 = QtWidgets.QGroupBox(self.groupBox_8)
        self.groupBox_5.setStyleSheet("#groupBox_5{\n"
"background-color: rgba(48,148,243,0);\n"
"border: 0px solid #42adff;\n"
"border-left: 0px solid #d9d9d9;\n"
"border-right: 0px solid rgba(29, 83, 185, 255);\n"
"border-radius:0px;}")
        self.groupBox_5.setTitle("")
        self.groupBox_5.setObjectName("groupBox_5")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.groupBox_5)
        self.horizontalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.fileButton = QtWidgets.QPushButton(self.groupBox_5)
        self.fileButton.setMinimumSize(QtCore.QSize(55, 28))
        self.fileButton.setMaximumSize(QtCore.QSize(16777215, 28))
        self.fileButton.setStyleSheet("QPushButton{font-family: \"Microsoft YaHei\";\n"
"    image: url(:/icons/icons/打开.png);\n"
"font-size: 14px;\n"
"font-weight: bold;\n"
"color:white;\n"
"text-align: center center;\n"
"padding-left: 5px;\n"
"padding-right: 5px;\n"
"padding-top: 4px;\n"
"padding-bottom: 4px;\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-color: rgba(255, 255, 255, 255);\n"
"border-radius: 3px;\n"
"background-color: rgba(200, 200, 200,0);}\n"
"\n"
"QPushButton:focus{outline: none;}\n"
"\n"
"QPushButton::pressed{font-family: \"Microsoft YaHei\";\n"
"                     font-size: 14px;\n"
"                     font-weight: bold;\n"
"                     color:rgb(200,200,200);\n"
"                     text-align: center center;\n"
"                     padding-left: 5px;\n"
"                     padding-right: 5px;\n"
"                     padding-top: 4px;\n"
"                     padding-bottom: 4px;\n"
"                     border-style: solid;\n"
"                     border-width: 0px;\n"
"                     border-color: rgba(255, 255, 255, 255);\n"
"                     border-radius: 3px;\n"
"                     background-color:  #bf513b;}\n"
"\n"
"QPushButton::disabled{font-family: \"Microsoft YaHei\";\n"
"                     font-size: 14px;\n"
"                     font-weight: bold;\n"
"                     color:rgb(200,200,200);\n"
"                     text-align: center center;\n"
"                     padding-left: 5px;\n"
"                     padding-right: 5px;\n"
"                     padding-top: 4px;\n"
"                     padding-bottom: 4px;\n"
"                     border-style: solid;\n"
"                     border-width: 0px;\n"
"                     border-color: rgba(255, 255, 255, 255);\n"
"                     border-radius: 3px;\n"
"                     background-color:  #bf513b;}\n"
"QPushButton::hover {\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-radius: 0px;\n"
"background-color: rgba(48,148,243,80);}")
        self.fileButton.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/img/icon/打开.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.fileButton.setIcon(icon4)
        self.fileButton.setObjectName("fileButton")
        self.horizontalLayout_8.addWidget(self.fileButton)
        self.cameraButton = QtWidgets.QPushButton(self.groupBox_5)
        self.cameraButton.setMinimumSize(QtCore.QSize(55, 28))
        self.cameraButton.setMaximumSize(QtCore.QSize(16777215, 28))
        self.cameraButton.setStyleSheet("QPushButton{font-family: \"Microsoft YaHei\";\n"
"    image: url(:/icons/icons/摄像头开.png);\n"
"font-size: 14px;\n"
"font-weight: bold;\n"
"color:white;\n"
"text-align: center center;\n"
"padding-left: 5px;\n"
"padding-right: 5px;\n"
"padding-top: 4px;\n"
"padding-bottom: 4px;\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-color: rgba(255, 255, 255, 255);\n"
"border-radius: 3px;\n"
"background-color: rgba(48,148,243,0);}\n"
"\n"
"QPushButton:focus{outline: none;}\n"
"\n"
"QPushButton::pressed{font-family: \"Microsoft YaHei\";\n"
"                     font-size: 14px;\n"
"                     font-weight: bold;\n"
"                     color:rgb(200,200,200);\n"
"                     text-align: center center;\n"
"                     padding-left: 5px;\n"
"                     padding-right: 5px;\n"
"                     padding-top: 4px;\n"
"                     padding-bottom: 4px;\n"
"                     border-style: solid;\n"
"                     border-width: 0px;\n"
"                     border-color: rgba(255, 255, 255, 255);\n"
"                     border-radius: 3px;\n"
"                     background-color:  #bf513b;}\n"
"\n"
"QPushButton::disabled{font-family: \"Microsoft YaHei\";\n"
"                     font-size: 14px;\n"
"                     font-weight: bold;\n"
"                     color:rgb(200,200,200);\n"
"                     text-align: center center;\n"
"                     padding-left: 5px;\n"
"                     padding-right: 5px;\n"
"                     padding-top: 4px;\n"
"                     padding-bottom: 4px;\n"
"                     border-style: solid;\n"
"                     border-width: 0px;\n"
"                     border-color: rgba(255, 255, 255, 255);\n"
"                     border-radius: 3px;\n"
"                     background-color:  #bf513b;}\n"
"QPushButton::hover {\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-radius: 0px;\n"
"background-color: rgba(48,148,243,80);}")
        self.cameraButton.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/img/icon/摄像头开.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.cameraButton.setIcon(icon5)
        self.cameraButton.setObjectName("cameraButton")
        self.horizontalLayout_8.addWidget(self.cameraButton)
        self.rtspButton = QtWidgets.QPushButton(self.groupBox_5)
        self.rtspButton.setMinimumSize(QtCore.QSize(55, 28))
        self.rtspButton.setMaximumSize(QtCore.QSize(16777215, 28))
        self.rtspButton.setStyleSheet("QPushButton{font-family: \"Microsoft YaHei\";\n"
"    image: url(:/icons/icons/实时视频流解析.png);\n"
"font-size: 14px;\n"
"font-weight: bold;\n"
"color:white;\n"
"text-align: center center;\n"
"padding-left: 5px;\n"
"padding-right: 5px;\n"
"padding-top: 4px;\n"
"padding-bottom: 4px;\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-color: rgba(255, 255, 255, 255);\n"
"border-radius: 3px;\n"
"background-color: rgba(48,148,243,0);}\n"
"\n"
"QPushButton:focus{outline: none;}\n"
"\n"
"QPushButton::pressed{font-family: \"Microsoft YaHei\";\n"
"                     font-size: 14px;\n"
"                     font-weight: bold;\n"
"                     color:rgb(200,200,200);\n"
"                     text-align: center center;\n"
"                     padding-left: 5px;\n"
"                     padding-right: 5px;\n"
"                     padding-top: 4px;\n"
"                     padding-bottom: 4px;\n"
"                     border-style: solid;\n"
"                     border-width: 0px;\n"
"                     border-color: rgba(255, 255, 255, 255);\n"
"                     border-radius: 3px;\n"
"                     background-color:  #bf513b;}\n"
"\n"
"QPushButton::disabled{font-family: \"Microsoft YaHei\";\n"
"                     font-size: 14px;\n"
"                     font-weight: bold;\n"
"                     color:rgb(200,200,200);\n"
"                     text-align: center center;\n"
"                     padding-left: 5px;\n"
"                     padding-right: 5px;\n"
"                     padding-top: 4px;\n"
"                     padding-bottom: 4px;\n"
"                     border-style: solid;\n"
"                     border-width: 0px;\n"
"                     border-color: rgba(255, 255, 255, 255);\n"
"                     border-radius: 3px;\n"
"                     background-color:  #bf513b;}\n"
"QPushButton::hover {\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-radius: 0px;\n"
"background-color: rgba(48,148,243,80);}")
        self.rtspButton.setText("")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/img/icon/实时视频流解析.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rtspButton.setIcon(icon6)
        self.rtspButton.setObjectName("rtspButton")
        self.horizontalLayout_8.addWidget(self.rtspButton)
        self.horizontalLayout_11.addWidget(self.groupBox_5)
        self.horizontalLayout_9.addLayout(self.horizontalLayout_11)
        self.verticalLayout_8.addLayout(self.horizontalLayout_9)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setContentsMargins(11, -1, 11, -1)
        self.verticalLayout_3.setSpacing(4)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_2 = QtWidgets.QLabel(self.groupBox_8)
        self.label_2.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 18px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
        self.label_2.setObjectName("label_2")
        self.verticalLayout_3.addWidget(self.label_2)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setSpacing(5)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.iouSpinBox = QtWidgets.QDoubleSpinBox(self.groupBox_8)
        self.iouSpinBox.setMinimumSize(QtCore.QSize(50, 0))
        self.iouSpinBox.setMaximumSize(QtCore.QSize(50, 16777215))
        self.iouSpinBox.setStyleSheet("QDoubleSpinBox{\n"
"background:rgba(200, 200, 200,50);\n"
"color:white;\n"
"font-size: 14px;\n"
"font-family: \"Microsoft YaHei UI\";\n"
"border-style: solid;\n"
"border-width: 1px;\n"
"border-color: rgba(200, 200, 200,100);\n"
"border-radius: 3px;}\n"
"\n"
"QDoubleSpinBox::down-button{\n"
"    image: url(:/icons/icons/箭头_列表展开.png);\n"
"background:rgba(200, 200, 200,0);\n"
"border-image: url(:/img/icon/箭头_列表展开.png);}\n"
"QDoubleSpinBox::down-button::hover{\n"
"background:rgba(200, 200, 200,100);\n"
"border-image: url(:/img/icon/箭头_列表展开.png);}\n"
"\n"
"QDoubleSpinBox::up-button{\n"
"background:rgba(200, 200, 200,0);\n"
"    image: url(:/icons/icons/箭头_列表收起.png);\n"
"border-image: url(:/img/icon/箭头_列表收起.png);}\n"
"QDoubleSpinBox::up-button::hover{\n"
"background:rgba(200, 200, 200,100);\n"
"border-image: url(:/img/icon/箭头_列表收起.png);}\n"
"")
        self.iouSpinBox.setMaximum(1.0)
        self.iouSpinBox.setSingleStep(0.01)
        self.iouSpinBox.setProperty("value", 0.45)
        self.iouSpinBox.setObjectName("iouSpinBox")
        self.horizontalLayout_4.addWidget(self.iouSpinBox)
        self.iouSlider = QtWidgets.QSlider(self.groupBox_8)
        self.iouSlider.setStyleSheet("QSlider{\n"
"border-color: #bcbcbc;\n"
"color:#d9d9d9;\n"
"}\n"
"QSlider::groove:horizontal {\n"
"     border: 1px solid #999999;\n"
"     height: 3px;\n"
"    margin: 0px 0;\n"
"     left: 5px; right: 5px;\n"
" }\n"
"QSlider::handle:horizontal {\n"
"     border: 0px ;\n"
"     border-image: url(:/img/icon/圆.png);\n"
"     width:15px;\n"
"     margin: -7px -7px -7px -7px;\n"
"}\n"
"QSlider::add-page:horizontal{\n"
"background: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #d9d9d9, stop:0.25 #d9d9d9, stop:0.5 #d9d9d9, stop:1 #d9d9d9);\n"
"\n"
"}\n"
"QSlider::sub-page:horizontal{\n"
" background: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #373737, stop:0.25 #373737, stop:0.5 #373737, stop:1 #373737);\n"
"}")
        self.iouSlider.setMaximum(100)
        self.iouSlider.setProperty("value", 45)
        self.iouSlider.setOrientation(QtCore.Qt.Horizontal)
        self.iouSlider.setObjectName("iouSlider")
        self.horizontalLayout_4.addWidget(self.iouSlider)
        self.verticalLayout_3.addLayout(self.horizontalLayout_4)
        self.verticalLayout_8.addLayout(self.verticalLayout_3)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setContentsMargins(11, -1, 11, -1)
        self.verticalLayout.setSpacing(4)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.groupBox_8)
        self.label.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 18px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setSpacing(5)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.confSpinBox = QtWidgets.QDoubleSpinBox(self.groupBox_8)
        self.confSpinBox.setMinimumSize(QtCore.QSize(50, 0))
        self.confSpinBox.setMaximumSize(QtCore.QSize(50, 16777215))
        self.confSpinBox.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.confSpinBox.setStyleSheet("QDoubleSpinBox{\n"
"background:rgba(200, 200, 200,50);\n"
"color:white;\n"
"font-size: 14px;\n"
"font-family: \"Microsoft YaHei UI\";\n"
"border-style: solid;\n"
"border-width: 1px;\n"
"border-color: rgba(200, 200, 200,100);\n"
"border-radius: 3px;}\n"
"\n"
"QDoubleSpinBox::down-button{\n"
"background:rgba(200, 200, 200,0);\n"
"    image: url(:/icons/icons/箭头_列表收起.png);\n"
"    image: url(:/icons/icons/箭头_列表展开.png);\n"
"border-image: url(:/img/icon/箭头_列表展开.png);}\n"
"QDoubleSpinBox::down-button::hover{\n"
"background:rgba(200, 200, 200,100);\n"
"border-image: url(:/img/icon/箭头_列表展开.png);}\n"
"\n"
"QDoubleSpinBox::up-button{\n"
"background:rgba(200, 200, 200,0);\n"
"    image: url(:/icons/icons/箭头_列表收起.png);\n"
"border-image: url(:/img/icon/箭头_列表收起.png);}\n"
"QDoubleSpinBox::up-button::hover{\n"
"background:rgba(200, 200, 200,100);\n"
"border-image: url(:/img/icon/箭头_列表收起.png);}\n"
"")
        self.confSpinBox.setMaximum(1.0)
        self.confSpinBox.setSingleStep(0.01)
        self.confSpinBox.setProperty("value", 0.25)
        self.confSpinBox.setObjectName("confSpinBox")
        self.horizontalLayout_3.addWidget(self.confSpinBox)
        self.confSlider = QtWidgets.QSlider(self.groupBox_8)
        self.confSlider.setStyleSheet("QSlider{\n"
"border-color: #bcbcbc;\n"
"color:#d9d9d9;\n"
"}\n"
"QSlider::groove:horizontal {\n"
"     border: 1px solid #999999;\n"
"     height: 3px;\n"
"    margin: 0px 0;\n"
"     left: 5px; right: 5px;\n"
" }\n"
"QSlider::handle:horizontal {\n"
"     border: 0px ;\n"
"     border-image: url(:/img/icon/圆.png);\n"
"     width:15px;\n"
"     margin: -7px -7px -7px -7px;\n"
"}\n"
"QSlider::add-page:horizontal{\n"
"background: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #d9d9d9, stop:0.25 #d9d9d9, stop:0.5 #d9d9d9, stop:1 #d9d9d9);\n"
"\n"
"}\n"
"QSlider::sub-page:horizontal{\n"
" background: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #373737, stop:0.25 #373737, stop:0.5 #373737, stop:1 #373737);\n"
"}")
        self.confSlider.setMaximum(100)
        self.confSlider.setProperty("value", 25)
        self.confSlider.setOrientation(QtCore.Qt.Horizontal)
        self.confSlider.setTickPosition(QtWidgets.QSlider.NoTicks)
        self.confSlider.setObjectName("confSlider")
        self.horizontalLayout_3.addWidget(self.confSlider)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.verticalLayout_8.addLayout(self.verticalLayout)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setContentsMargins(11, -1, 11, -1)
        self.verticalLayout_5.setSpacing(4)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.label_8 = QtWidgets.QLabel(self.groupBox_8)
        self.label_8.setMaximumSize(QtCore.QSize(80, 16777215))
        self.label_8.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 18px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
        self.label_8.setObjectName("label_8")
        self.horizontalLayout_14.addWidget(self.label_8)
        self.checkBox = QtWidgets.QCheckBox(self.groupBox_8)
        self.checkBox.setStyleSheet("\n"
"QCheckBox\n"
"{font-size: 16px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);;}\n"
"\n"
"QCheckBox::indicator {\n"
"    image: url(:/icons/icons/button-on.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"QCheckBox::indicator:unchecked {\n"
"\n"
"}\n"
"\n"
"QCheckBox::indicator:checked {\n"
"\n"
"}\n"
"")
        self.checkBox.setChecked(True)
        self.checkBox.setObjectName("checkBox")
        self.horizontalLayout_14.addWidget(self.checkBox)
        self.verticalLayout_5.addLayout(self.horizontalLayout_14)
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setSpacing(5)
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.rateSpinBox = QtWidgets.QSpinBox(self.groupBox_8)
        self.rateSpinBox.setMinimumSize(QtCore.QSize(50, 0))
        self.rateSpinBox.setMaximumSize(QtCore.QSize(50, 16777215))
        self.rateSpinBox.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.rateSpinBox.setStyleSheet("QSpinBox{\n"
"background:rgba(200, 200, 200,50);\n"
"color:white;\n"
"font-size: 14px;\n"
"font-family: \"Microsoft YaHei UI\";\n"
"border-style: solid;\n"
"border-width: 1px;\n"
"border-color: rgba(200, 200, 200,100);\n"
"border-radius: 3px;}\n"
"\n"
"QSpinBox::down-button{\n"
"background:rgba(200, 200, 200,0);\n"
"\n"
"    image: url(:/icons/icons/箭头_列表展开.png);\n"
"border-image: url(:/img/icon/箭头_列表展开.png);}\n"
"QDoubleSpinBox::down-button::hover{\n"
"background:rgba(200, 200, 200,100);\n"
"border-image: url(:/img/icon/箭头_列表展开.png);}\n"
"\n"
"QSpinBox::up-button{\n"
"    image: url(:/icons/icons/箭头_列表收起.png);\n"
"background:rgba(200, 200, 200,0);\n"
"border-image: url(:/img/icon/箭头_列表收起.png);}\n"
"QSpinBox::up-button::hover{\n"
"background:rgba(200, 200, 200,100);\n"
"border-image: url(:/img/icon/箭头_列表收起.png);}\n"
"")
        self.rateSpinBox.setMinimum(1)
        self.rateSpinBox.setMaximum(20)
        self.rateSpinBox.setSingleStep(1)
        self.rateSpinBox.setProperty("value", 1)
        self.rateSpinBox.setObjectName("rateSpinBox")
        self.horizontalLayout_13.addWidget(self.rateSpinBox)
        self.rateSlider = QtWidgets.QSlider(self.groupBox_8)
        self.rateSlider.setStyleSheet("QSlider{\n"
"border-color: #bcbcbc;\n"
"color:#d9d9d9;\n"
"}\n"
"QSlider::groove:horizontal {\n"
"     border: 1px solid #999999;\n"
"     height: 3px;\n"
"    margin: 0px 0;\n"
"     left: 5px; right: 5px;\n"
" }\n"
"QSlider::handle:horizontal {\n"
"     border: 0px ;\n"
"     border-image: url(:/img/icon/圆.png);\n"
"     width:15px;\n"
"     margin: -7px -7px -7px -7px;\n"
"}\n"
"QSlider::add-page:horizontal{\n"
"background: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #d9d9d9, stop:0.25 #d9d9d9, stop:0.5 #d9d9d9, stop:1 #d9d9d9);\n"
"\n"
"}\n"
"QSlider::sub-page:horizontal{\n"
" background: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #373737, stop:0.25 #373737, stop:0.5 #373737, stop:1 #373737);\n"
"}")
        self.rateSlider.setMinimum(1)
        self.rateSlider.setMaximum(20)
        self.rateSlider.setSingleStep(1)
        self.rateSlider.setPageStep(1)
        self.rateSlider.setProperty("value", 1)
        self.rateSlider.setOrientation(QtCore.Qt.Horizontal)
        self.rateSlider.setTickPosition(QtWidgets.QSlider.NoTicks)
        self.rateSlider.setObjectName("rateSlider")
        self.horizontalLayout_13.addWidget(self.rateSlider)
        self.verticalLayout_5.addLayout(self.horizontalLayout_13)
        self.verticalLayout_8.addLayout(self.verticalLayout_5)
        self.groupBox_6 = QtWidgets.QGroupBox(self.groupBox_8)
        self.groupBox_6.setMinimumSize(QtCore.QSize(0, 0))
        self.groupBox_6.setMaximumSize(QtCore.QSize(16777215, 42))
        self.groupBox_6.setStyleSheet("#groupBox_6{\n"
"border: 0px solid #42adff;\n"
"border-radius:0px;}")
        self.groupBox_6.setTitle("")
        self.groupBox_6.setObjectName("groupBox_6")
        self.horizontalLayout_36 = QtWidgets.QHBoxLayout(self.groupBox_6)
        self.horizontalLayout_36.setContentsMargins(11, 0, 11, 0)
        self.horizontalLayout_36.setObjectName("horizontalLayout_36")
        self.saveCheckBox = QtWidgets.QCheckBox(self.groupBox_6)
        self.saveCheckBox.setStyleSheet("\n"
"QCheckBox\n"
"{font-size: 18px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);;}\n"
"\n"
"QCheckBox::indicator {\n"
"    image: url(:/icons/icons/button-on.png);\n"
"    width: 20px;\n"
"    height: 20px;\n"
"}\n"
"QCheckBox::indicator:unchecked {\n"
"\n"
"\n"
"}\n"
"\n"
"QCheckBox::indicator:checked {\n"
"\n"
"}\n"
"")
        self.saveCheckBox.setChecked(True)
        self.saveCheckBox.setObjectName("saveCheckBox")
        self.horizontalLayout_36.addWidget(self.saveCheckBox)
        self.verticalLayout_8.addWidget(self.groupBox_6)
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setContentsMargins(-1, 0, -1, 0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.groupBox_9 = QtWidgets.QGroupBox(self.groupBox_8)
        self.groupBox_9.setMinimumSize(QtCore.QSize(0, 42))
        self.groupBox_9.setMaximumSize(QtCore.QSize(16777215, 42))
        self.groupBox_9.setStyleSheet("#groupBox_9{\n"
"border: 0px solid #42adff;\n"
"border-top: 1px solid rgba(200, 200, 200,100);\n"
"border-bottom: 1px solid rgba(200, 200, 200,100);\n"
"border-radius:0px;}")
        self.groupBox_9.setTitle("")
        self.groupBox_9.setObjectName("groupBox_9")
        self.horizontalLayout_38 = QtWidgets.QHBoxLayout(self.groupBox_9)
        self.horizontalLayout_38.setContentsMargins(11, 0, 11, 0)
        self.horizontalLayout_38.setObjectName("horizontalLayout_38")
        self.label_11 = QtWidgets.QLabel(self.groupBox_9)
        self.label_11.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 22px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
        self.label_11.setObjectName("label_11")
        self.horizontalLayout_38.addWidget(self.label_11)
        spacerItem2 = QtWidgets.QSpacerItem(37, 39, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_38.addItem(spacerItem2)
        self.verticalLayout_7.addWidget(self.groupBox_9)
        self.groupBox_10 = QtWidgets.QGroupBox(self.groupBox_8)
        self.groupBox_10.setMinimumSize(QtCore.QSize(0, 42))
        self.groupBox_10.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.groupBox_10.setStyleSheet("#groupBox_10{\n"
"border: 0px solid #42adff;\n"
"\n"
"border-radius:0px;}")
        self.groupBox_10.setTitle("")
        self.groupBox_10.setObjectName("groupBox_10")
        self.horizontalLayout_39 = QtWidgets.QHBoxLayout(self.groupBox_10)
        self.horizontalLayout_39.setContentsMargins(11, 0, 11, 0)
        self.horizontalLayout_39.setObjectName("horizontalLayout_39")
        self.resultWidget = QtWidgets.QListWidget(self.groupBox_10)
        self.resultWidget.setStyleSheet("QListWidget{\n"
"background-color: rgba(12, 28, 77, 0);\n"
"\n"
"border-radius:0px;\n"
"font-family: \"Microsoft YaHei\";\n"
"font-size: 16px;\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
        self.resultWidget.setObjectName("resultWidget")
        self.horizontalLayout_39.addWidget(self.resultWidget)
        self.verticalLayout_7.addWidget(self.groupBox_10)
        self.verticalLayout_7.setStretch(1, 1)
        self.verticalLayout_8.addLayout(self.verticalLayout_7)
        self.horizontalLayout_7.addWidget(self.groupBox_8)
        self.groupBox_201 = QtWidgets.QGroupBox(self.groupBox_18)
        self.groupBox_201.setStyleSheet("#groupBox_201{\n"
"background-color: rgba(95, 95, 95, 200);\n"
"border: 0px solid #42adff;\n"
"border-left: 1px solid rgba(200, 200, 200,100);\n"
"border-right: 0px solid rgba(29, 83, 185, 255);\n"
"border-radius:0px;}")
        self.groupBox_201.setTitle("")
        self.groupBox_201.setObjectName("groupBox_201")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.groupBox_201)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.groupBox_3 = QtWidgets.QGroupBox(self.groupBox_201)
        self.groupBox_3.setMinimumSize(QtCore.QSize(0, 42))
        self.groupBox_3.setMaximumSize(QtCore.QSize(16777215, 42))
        self.groupBox_3.setStyleSheet("#groupBox_3{\n"
"border: 0px solid #42adff;\n"
"border-bottom: 1px solid rgba(200, 200, 200,100);\n"
"border-radius:0px;}")
        self.groupBox_3.setTitle("")
        self.groupBox_3.setObjectName("groupBox_3")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.groupBox_3)
        self.horizontalLayout_6.setContentsMargins(11, 0, 11, 0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.label_6 = QtWidgets.QLabel(self.groupBox_3)
        self.label_6.setMinimumSize(QtCore.QSize(0, 0))
        self.label_6.setMaximumSize(QtCore.QSize(16777215, 40))
        self.label_6.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 22px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_6.addWidget(self.label_6)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem3)
        self.fps_label = QtWidgets.QLabel(self.groupBox_3)
        self.fps_label.setMinimumSize(QtCore.QSize(100, 40))
        self.fps_label.setMaximumSize(QtCore.QSize(100, 40))
        self.fps_label.setStyleSheet("QLabel\n"
"{\n"
"    font-size: 20px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: bold;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
        self.fps_label.setText("")
        self.fps_label.setAlignment(QtCore.Qt.AlignCenter)
        self.fps_label.setObjectName("fps_label")
        self.horizontalLayout_6.addWidget(self.fps_label)
        self.verticalLayout_4.addWidget(self.groupBox_3)
        self.splitter = QtWidgets.QSplitter(self.groupBox_201)
        self.splitter.setEnabled(True)
        self.splitter.setStyleSheet("#splitter::handle{background: 1px solid  rgba(200, 200, 200,100);}")
        self.splitter.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.splitter.setLineWidth(10)
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setHandleWidth(1)
        self.splitter.setObjectName("splitter")
        self.raw_video = Label_click_Mouse(self.splitter)
        self.raw_video.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.raw_video.sizePolicy().hasHeightForWidth())
        self.raw_video.setSizePolicy(sizePolicy)
        self.raw_video.setMinimumSize(QtCore.QSize(200, 0))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(36)
        self.raw_video.setFont(font)
        self.raw_video.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.raw_video.setStyleSheet("color: rgb(218, 218, 218);\n"
"")
        self.raw_video.setText("")
        self.raw_video.setScaledContents(False)
        self.raw_video.setAlignment(QtCore.Qt.AlignCenter)
        self.raw_video.setObjectName("raw_video")
        self.out_video = Label_click_Mouse(self.splitter)
        self.out_video.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.out_video.sizePolicy().hasHeightForWidth())
        self.out_video.setSizePolicy(sizePolicy)
        self.out_video.setMinimumSize(QtCore.QSize(200, 0))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(36)
        self.out_video.setFont(font)
        self.out_video.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.out_video.setStyleSheet("color: rgb(218, 218, 218);\n"
"\n"
"\n"
"")
        self.out_video.setText("")
        self.out_video.setScaledContents(False)
        self.out_video.setAlignment(QtCore.Qt.AlignCenter)
        self.out_video.setObjectName("out_video")
        self.verticalLayout_4.addWidget(self.splitter)
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setContentsMargins(11, -1, 11, -1)
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.runButton = QtWidgets.QPushButton(self.groupBox_201)
        self.runButton.setMinimumSize(QtCore.QSize(40, 40))
        self.runButton.setStyleSheet("QPushButton {\n"
"    image: url(:/icons/icons/运行.png);\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-radius: 0px;\n"
"background-color: rgba(223, 223, 223, 0);\n"
"}\n"
"QPushButton::focus{outline: none;}\n"
"QPushButton::hover {\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-radius: 0px;\n"
"background-color: rgba(223, 223, 223, 150);}")
        self.runButton.setText("")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(":/img/icon/运行.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon7.addPixmap(QtGui.QPixmap(":/img/icon/暂停.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        icon7.addPixmap(QtGui.QPixmap(":/img/icon/运行.png"), QtGui.QIcon.Disabled, QtGui.QIcon.Off)
        icon7.addPixmap(QtGui.QPixmap(":/img/icon/暂停.png"), QtGui.QIcon.Disabled, QtGui.QIcon.On)
        icon7.addPixmap(QtGui.QPixmap(":/img/icon/运行.png"), QtGui.QIcon.Active, QtGui.QIcon.Off)
        icon7.addPixmap(QtGui.QPixmap(":/img/icon/暂停.png"), QtGui.QIcon.Active, QtGui.QIcon.On)
        icon7.addPixmap(QtGui.QPixmap(":/img/icon/运行.png"), QtGui.QIcon.Selected, QtGui.QIcon.Off)
        icon7.addPixmap(QtGui.QPixmap(":/img/icon/暂停.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.runButton.setIcon(icon7)
        self.runButton.setIconSize(QtCore.QSize(30, 30))
        self.runButton.setCheckable(True)
        self.runButton.setObjectName("runButton")
        self.horizontalLayout_12.addWidget(self.runButton)
        self.progressBar = QtWidgets.QProgressBar(self.groupBox_201)
        self.progressBar.setMaximumSize(QtCore.QSize(16777215, 5))
        self.progressBar.setStyleSheet("QProgressBar{ color: rgb(255, 255, 255); font:12pt; border-radius:2px; text-align:center; border:none; background-color: rgba(215, 215, 215,100);}\n"
"QProgressBar:chunk{ border-radius:0px; background: rgba(55, 55, 55, 200);}")
        self.progressBar.setMaximum(1000)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setTextVisible(False)
        self.progressBar.setObjectName("progressBar")
        self.horizontalLayout_12.addWidget(self.progressBar)
        self.stopButton = QtWidgets.QPushButton(self.groupBox_201)
        self.stopButton.setMinimumSize(QtCore.QSize(40, 40))
        self.stopButton.setStyleSheet("QPushButton {\n"
"image: url(:/icons/icons/终止.png);\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-radius: 0px;\n"
"background-color: rgba(223, 223, 223, 0);\n"
"}\n"
"QPushButton::focus{outline: none;}\n"
"QPushButton::hover {\n"
"\n"
"border-style: solid;\n"
"border-width: 0px;\n"
"border-radius: 0px;\n"
"background-color: rgba(223, 223, 223, 150);}")
        self.stopButton.setText("")
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(":/img/icon/终止.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.stopButton.setIcon(icon8)
        self.stopButton.setIconSize(QtCore.QSize(30, 30))
        self.stopButton.setObjectName("stopButton")
        self.horizontalLayout_12.addWidget(self.stopButton)
        self.verticalLayout_4.addLayout(self.horizontalLayout_12)
        self.verticalLayout_4.setStretch(1, 1)
        self.horizontalLayout_7.addWidget(self.groupBox_201)
        self.verticalLayout_6.addLayout(self.horizontalLayout_7)
        self.groupBox_4 = QtWidgets.QGroupBox(self.groupBox_18)
        self.groupBox_4.setMinimumSize(QtCore.QSize(0, 30))
        self.groupBox_4.setMaximumSize(QtCore.QSize(16777215, 30))
        self.groupBox_4.setStyleSheet("#groupBox_4{\n"
"background-color: rgba(75, 75, 75, 200);\n"
"border: 0px solid #42adff;\n"
"border-left: 0px solid rgba(29, 83, 185, 255);\n"
"border-right: 0px solid rgba(29, 83, 185, 255);\n"
"border-top: 1px solid rgba(200, 200, 200,100);\n"
"border-radius:0px;}")
        self.groupBox_4.setTitle("")
        self.groupBox_4.setObjectName("groupBox_4")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.groupBox_4)
        self.horizontalLayout_10.setContentsMargins(-1, 0, -1, 0)
        self.horizontalLayout_10.setSpacing(0)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.statistic_label = QtWidgets.QLabel(self.groupBox_4)
        self.statistic_label.setMouseTracking(False)
        self.statistic_label.setStyleSheet("QLabel\n"
"{\n"
"\n"
"    font-size: 16px;\n"
"    font-family: \"Microsoft YaHei\";\n"
"    font-weight: light;\n"
"         border-radius:9px;\n"
"        background:rgba(66, 195, 255, 0);\n"
"color: rgb(218, 218, 218);\n"
"}\n"
"")
        self.statistic_label.setText("")
        self.statistic_label.setObjectName("statistic_label")
        self.horizontalLayout_10.addWidget(self.statistic_label)
        self.verticalLayout_6.addWidget(self.groupBox_4)
        self.verticalLayout_2.addWidget(self.groupBox_18)
        mainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(mainWindow)
        self.closeButton.clicked.connect(self.closeButton.close) # type: ignore
        self.minButton.clicked.connect(self.minButton.showMinimized) # type: ignore
        self.closeButton.clicked.connect(self.groupBox.close) # type: ignore
        self.closeButton.clicked.connect(self.groupBox_3.close) # type: ignore
        self.closeButton.clicked.connect(self.raw_video.close) # type: ignore
        self.closeButton.clicked.connect(self.out_video.close) # type: ignore
        self.closeButton.clicked.connect(self.groupBox_201.close) # type: ignore
        self.closeButton.clicked.connect(self.groupBox_2.close) # type: ignore
        self.closeButton.clicked.connect(self.groupBox_201.close) # type: ignore
        self.closeButton.clicked.connect(self.statistic_label.close) # type: ignore
        self.closeButton.clicked.connect(self.groupBox_8.close) # type: ignore
        self.closeButton.clicked.connect(self.groupBox_4.close) # type: ignore
        self.closeButton.clicked.connect(self.groupBox_201.close) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(mainWindow)

    def retranslateUi(self, mainWindow):
        _translate = QtCore.QCoreApplication.translate
        mainWindow.setWindowTitle(_translate("mainWindow", "基于YOLOv8的水下鱼类计数系统"))
        self.label_4.setText(_translate("mainWindow", "YOLOv8 GUI"))
        self.label_5.setText(_translate("mainWindow", "setting"))
        self.label_3.setText(_translate("mainWindow", "model"))
        self.comboBox.setItemText(0, _translate("mainWindow", "yolov8s.pt"))
        self.comboBox.setItemText(1, _translate("mainWindow", "yolov8m.pt"))
        self.comboBox.setItemText(2, _translate("mainWindow", "yolov8l.pt"))
        self.comboBox.setItemText(3, _translate("mainWindow", "yolov8x.pt"))
        self.label_10.setText(_translate("mainWindow", "input"))
        self.fileButton.setToolTip(_translate("mainWindow", "file"))
        self.cameraButton.setToolTip(_translate("mainWindow", "camera"))
        self.rtspButton.setToolTip(_translate("mainWindow", "rtsp"))
        self.label_2.setText(_translate("mainWindow", "IoU"))
        self.label.setText(_translate("mainWindow", "conf"))
        self.label_8.setText(_translate("mainWindow", "latency"))
        self.checkBox.setText(_translate("mainWindow", "enable"))
        self.saveCheckBox.setText(_translate("mainWindow", "save automatically"))
        self.label_11.setText(_translate("mainWindow", "result statistics"))
        self.label_6.setText(_translate("mainWindow", "view"))
class MainWindow(QMainWindow, Ui_mainWindow):
        #一个初始化函数
        def __init__(self, parent=None):
                super(MainWindow, self).__init__(parent)
                self.setupUi(self) #用于将 UI 设计文件（.ui）中的控件和布局加载到窗口中。
                self.m_flag = False #定义一个标志变量 m_flag，并初始化为 False。它可能用于后续的某些逻辑控制

                # style 1: window can be stretched（窗口可以拉伸）
                self.setWindowFlags(Qt.CustomizeWindowHint | Qt.WindowStaysOnTopHint)
                #Qt.CustomizeWindowHint 和 Qt.WindowStaysOnTopHint 表示该窗口会始终保持在其他窗口之上，并且窗口的外观可以自定义。
                # style 2: window can not be stretched（窗口不能拉伸）
                # self.setWindowFlags(Qt.Window | Qt.FramelessWindowHint
                #                     | Qt.WindowSystemMenuHint | Qt.WindowMinimizeButtonHint | Qt.WindowMaximizeButtonHint)
                # self.setWindowOpacity(0.85)  # Transparency of window

                #三个事件处理函数
                self.minButton.clicked.connect(self.showMinimized)#最小化窗口
                self.maxButton.clicked.connect(self.max_or_restore)#最大化窗口
                self.maxButton.animateClick(10) #设置最大化动画的函数
                self.closeButton.clicked.connect(self.close) #关闭窗口
                #设定一个定时器
                self.qtimer = QTimer(self)
                self.qtimer.setSingleShot(True) #只触发一次
                self.qtimer.timeout.connect(lambda: self.statistic_label.clear())

                # search models automatically
                self.comboBox.clear()
                #加载.pt模型列表
                self.pt_list = os.listdir('./pt')
                self.pt_list = [file for file in self.pt_list if file.endswith('.pt')]
                self.pt_list.sort(key=lambda x: os.path.getsize('./pt/' + x))
                #self.pt_list = os.listdir('/absolute/path/to/pt')  # 使用别的绝对路径来搜索

                #更新模型选择框
                self.comboBox.clear()
                self.comboBox.addItems(self.pt_list)#更新UI上的下拉款comboBox，将模型文件列表.pt添加到下拉框中
                #创建一个定时器qtimer_search，每2秒触发一次 search_pt() 函数，可能用于自动搜索模型或其他资源。
                self.qtimer_search = QTimer(self)
                self.qtimer_search.timeout.connect(lambda: self.search_pt())
                self.qtimer_search.start(2000)

                # yolov8 线程设置
                self.det_thread = DetThread()  #创建一个 DetThread 线程，用于执行 YOLOv5 模型推理任务。
                self.model_type = self.comboBox.currentText()#获取当前选择的模型（model_type），并设置 YOLOv5 使用的模型权重文件路径。
                self.det_thread.weights = "./pt/%s" % self.model_type
                self.det_thread.source = '0'
                #信号与槽连接（用于显示图片与信息等）
                self.det_thread.percent_length = self.progressBar.maximum()
                self.det_thread.send_raw.connect(lambda x: self.show_image(x, self.raw_video))
                self.det_thread.send_img.connect(lambda x: self.show_image(x, self.out_video))
                self.det_thread.send_statistic.connect(self.show_statistic)
                self.det_thread.send_msg.connect(lambda x: self.show_msg(x))
                self.det_thread.send_percent.connect(lambda x: self.progressBar.setValue(x))
                self.det_thread.send_fps.connect(lambda x: self.fps_label.setText(x))
                #按钮时间连接
                self.screenButton.clicked.connect(self.srceendetect)
                self.fileButton.clicked.connect(self.open_file)#选择文件
                self.cameraButton.clicked.connect(self.chose_cam)#选择相机
                self.rtspButton.clicked.connect(self.chose_rtsp)#选择PTSP流
                #运行与停止按钮
                self.runButton.clicked.connect(self.run_or_continue)
                self.stopButton.clicked.connect(self.stop)
                self.stopButton.clicked.connect(self.stopsc)
                #参数改变连接
                self.comboBox.currentTextChanged.connect(self.change_model) #将comboBox与change_model函数连接起来
                #与change_val函数连接起来
                self.confSpinBox.valueChanged.connect(lambda x: self.change_val(x, 'confSpinBox'))
                self.confSlider.valueChanged.connect(lambda x: self.change_val(x, 'confSlider'))
                self.iouSpinBox.valueChanged.connect(lambda x: self.change_val(x, 'iouSpinBox'))
                self.iouSlider.valueChanged.connect(lambda x: self.change_val(x, 'iouSlider'))
                self.rateSpinBox.valueChanged.connect(lambda x: self.change_val(x, 'rateSpinBox'))
                self.rateSlider.valueChanged.connect(lambda x: self.change_val(x, 'rateSlider'))
                #为复选框（checkBox, saveCheckBox）连接点击事件，可能用于启用/禁用某些设置或保存设置。
                self.checkBox.clicked.connect(self.checkrate)
                self.saveCheckBox.clicked.connect(self.is_save)
                #加载之前保存的设置，可能是从文件中读取应用程序的配置或用户的设置。
                self.load_setting()
        #一个控制进程停止并显示finish的函数
        def stopsc(self):
                global tclose
                self.statistic_label.setText("Finished")
                tclose = True
        #从屏幕上截取一个区域的截图并返回
        def getScreenshot(self):
                mtop, mbot = 30, 50 #定义截图区域边距
                monitor = {"left": x0, "top": y0, "width": x1 - x0, "height": y1 - y0} #监视器范围
                img_src = np.array(mss.mss().grab(monitor)) #用mss库进行截屏
                time.sleep(0.1) #暂停0.1s
                img_src = img_src[:, :, :3] #裁剪图像的颜色通道
                img_src = img_src[mtop:-mbot] #根据mtop和mbot来裁剪图像
                #返回图像数据和区域信息
                return img_src, [x0, y0, x1, y1, mtop, mbot]
        #一个循环任务，用来不断获取屏幕截图，并在特定条件下终止
        def getMonitor(self):
                global img_src
                while True:
                    while tsleep:
                        time.sleep(1)
                    img_src, _ = self.getScreenshot()
                    if tclose:
                        break
                print("t1 close")
        #使用yolov5模型进行图像检测，并在一个OpenCV窗口显示检测结果
        # def yolov5Detect(self):
        #         global tclose, truning #tclose 用于控制检测的终止，truning 用于标记检测是否正在进行中
        #         #OpenCV窗口设置
        #         CV2.namedWindow("detectWindow", CV2.WINDOW_NORMAL)
        #         CV2.resizeWindow("detectWindow", x1 - x0, y1 - y0)
        #         CV2.moveWindow("detectWindow", 600, 600)
        #         #加载YOLOv5模型
        #         device = select_device('cpu')#如果要用GPU改成cuda就可以了
        #         model = attempt_load('./pt/yolov5CW.pt', map_location=device) #加载已经训练好的模型
        #         #启动检测
        #         truning = True #检测开始
        #         #循环暂停检测直到rsleep为false；如果tsleep为true程序会休眠1s
        #         while True:
        #                 while tsleep:
        #                         time.sleep(1)
        #         #获取图像并进行检测
        #                 img = img_src.copy() #复制一个截图数据（img_src是一个全局变量）
        #                 im0 = self.getDetection(img, model) #传入图像和模型，返回检测后的图像im0
        #                 CV2.imshow("detectWindow", im0)  #使用openCV来显示检测后的图像，显示在detectWindow窗口中
        #                 #检查退出条件
        #                 if (CV2.waitKey(1) & 0xFF == ord("q")) | tclose: #如果按下了q或 tclose 为 True，则销毁所有 OpenCV 窗口，停止检测任务，设置 tclose = True 和 truning = False，并更新 runButton 的状态
        #                         # 就会销毁窗口并退出循环，否则继续下一次循环。
        #                         CV2.destroyAllWindows()
        #                         tclose = True
        #                         truning = False
        #                         self.runButton.setChecked(False)
        #                         break
        #         #打印检测日志
        #         print("t2 close")
        #图像处理函数，用深度学习模型来检测图像中的对象，将检测结果可视化
        def getDetection(self, img, model):#输入参数：img表示输入图像（numpy数组，表示一张图片）；model，yolo模型
                im3 = img.copy()
                #设备设置
                device = torch.device("cuda")#用GPU
                half = False    #half 变量指示是否使用半精度浮点数
                augment = False
                half &= device.type != 'cpu' #如果设备是GPU，那么half会设置为true，否则为false
                img0 = cv2.flip(img, 1)  # 图像左右翻转
                img = letterbox(img0, 640, 32)[0] #缩放图像
                img = img.transpose((2, 0, 1))[::-1]  # HWC to CHW, BGR to RGB转成模型需要输入的格式
                img = np.ascontiguousarray(img)
                #将图像转换为PyTorch张量
                img = torch.from_numpy(img).to(device) #转成torch张量，传到设备上
                img = img.half() if half else img.float()  # uint8 to fp16/32 转成float16
                #归一化：将像素值从0-255转到0-1之间
                img /= 255.0  # 0 - 255 to 0.0 - 1.0
                #模型推理
                # 如果图像的维度为 3（即单张图像），则为其添加一个 batch 维度
                if img.ndimension() == 3:
                        img = img.unsqueeze(0)
                #将图像输入到目标检测模型中，进行推理得到预测结果
                pred = model(img, augment=augment)[0]
                #设置目标检测的参数
                classes = None #指定要检测的类别，如果为None，意味着模型将检测所有类别
                agnostic_nms = False #一个标志位，表示是否使用类别无关的非极大值抑制（NMS）。如果设置为 True，NMS将不会考虑不同类别的目标，而是会将不同类别的框进行合并。如果是 False，则NMS会按照类别分别进行
                hide_labels = False #是否隐藏目标框上的标签。 false 则会显示标签
                hide_conf = False #是否隐藏置信度
                max_det = 1000 #设置模型在一张图像中最多能检测到多少个目标
                iou = 0.3 #iou（Intersection over Union，交并比）是一个阈值，决定了哪些检测框可以被认为是重复的。当两个框的 IOU 大于这个阈值时，后者的框会被抑制。
                conf = 0.3 #conf（置信度）是一个阈值，表示只有置信度大于这个值的检测框才会被保留。通常，只有高置信度的检测框才是可靠的目标。
                a = model.module.names if hasattr(model, 'module') else model.names  # 检查模型是否使用了 DataParallel（即多GPU训练模式）。如果是，它会从 model.module.names 获取类别名称；如果不是，则直接从 model.names 获取类别名称。
                #model.names 是模型类别名称的字典，用来标识每个类别的名称
                names = list(a.values()) #将类别名称从字典转换为列表，names 现在是一个包含所有类别名称的列表。这个列表将在后续的处理过程中用来显示检测框的标签。
                statistic_dic = {name: 0 for name in names}
                #创建了一个统计字典 statistic_dic，用来记录每个类别的检测数量。字典的键是类别名称，值是初始的计数（0）
                #一个ui小组件，用于用户选择iou个conf
                iou = self.iouSpinBox.value()
                conf = self.confSpinBox.value()
                #后处理：使用非极大值抑制（NMS）来过滤掉重复的检测框：
                pred = non_max_suppression(pred, conf, iou, classes, agnostic_nms,
                                           max_det=max_det)
                bboxes = [] #创建一个空列表用来存储边界框
                for i, det in enumerate(pred):  # 对pred中的每个预测进行遍历，i是当前处理的图像索引，det是当前图像的检测结果
                        annotator = Annotator(im3, line_width=3, example=str(names))    #创建一个Annotator对象，im3 是当前处理的图像，line_width=3 设置了绘制边界框时线条的宽度
                        #检查有没有物体，有的话（det不为空）执行以下操作
                        if len(det):
                                # 将边界框的坐标缩放到适合网络的尺寸
                                det[:, :4] = scale_coords(img.shape[2:], det[:, :4], im3.shape).round()

                                #书写结果
                                for *xyxy, conf, cls in reversed(det):
                                        c = int(cls)  # 将类被索引cls转换成整数类型
                                        statistic_dic[names[c]] += 1 #更新statistic_dic字典，记录检测到的次数
                                        label = None if hide_labels else (
                                                names[c] if hide_conf else f'{names[c]} {conf:.2f}') #根据上面的参数，决定要不要隐藏标签和置信度
                                        annotator.box_label(xyxy, label, color=colors(c, True)) #绘制边界和标签
                im0 = annotator.result() #绘制结果图像im0
                self.det_thread.send_statistic.emit(statistic_dic) #将更新后的统计信息发送给其他线程或模块进行处理
                self.det_thread.send_img.emit(im0) #将im0发送欸其他线程或模块显示或保存
                self.det_thread.send_raw.emit(im3 if isinstance(im3, np.ndarray) else im3[0])
                return im0
        #在程序中截取屏幕截图，并且触发其他两个线程进行后续处理。
        def srceendetect(self):
                global x0, y0, x1, y1, tclose, truning
                if truning:
                        tclose = True #关闭标志，用于进程终止控制
                with mss.mss() as sct:
                        # 获取屏幕信息
                        monitor = sct.monitors[1]  # 如果您有多个显示器，请根据实际情况选择要截取的显示器索引
                        # 获取屏幕截图
                        screenshot = np.array(sct.grab(monitor)) #将截图保存为 numpy 数组，以便进行后续的图像处理
                x0, y0, x1, y1 = boxScreen(screenshot) #用boxScreen函数处理截图并返回一个矩形区域
                source = 'screenCapture' #定义截图来源名称为‘screenCapture’
                self.statistic_msg('Detecting >> model：{}，file：{}'.
                                   format(os.path.basename(self.det_thread.weights),
                                          source))
                self.runButton.setChecked(True) #将一个名为runbutton的按钮状态设置为true

                tclose = False
                t1 = threading.Thread(target=self.getMonitor, args=()) #创建一个进程来之心getMonitor方法
                t1.start() #启动上面的进程
                t2 = threading.Thread(target=self.yolov5Detect, args=()) #创建另一个线程来执行yolov5Detect方法
                t2.start() #启动上面的进程
        #搜索并列出文件夹里面所有pt文件，并排列更新到comboBox中
        def search_pt(self):
                pt_list = os.listdir('./pt') #列出要搜索的工作目录pt
                pt_list = [file for file in pt_list if file.endswith('.pt')]   #从所有的文件中筛选出pt文件，
                pt_list.sort(key=lambda x: os.path.getsize('./pt/' + x)) #按照文件大小排序
                # 更新pt_list和下拉框
                if pt_list != self.pt_list:
                        self.pt_list = pt_list
                        self.comboBox.clear()
                        self.comboBox.addItems(self.pt_list)
        #根据复选框状态决定是否设置一个保存路径，并吧路径赋值给线程对象的save_fold属性
        def is_save(self):
                if self.saveCheckBox.isChecked(): #如果复选框被选中，isChecked返回true
                        self.det_thread.save_fold = './result' #保存到result目录下
                else:
                        self.det_thread.save_fold = None #如果复选框没被选中，返回None
        #根据复选框状态决定是否启用XX功能
        def checkrate(self):
                if self.checkBox.isChecked(): #检查复选框是否被选中，选中返回true，没有返回false
                        self.det_thread.rate_check = True     #若选中，启用某功能
                else:
                        self.det_thread.rate_check = False #未选中，禁用该功能
        #一个弹出窗口，让用户选择或设置一个RTSP视频流的URL,并保存
        def chose_rtsp(self):
                self.rtsp_window = Window() #创建一个新的窗口rtsp_window,包含一个用于显示和编辑RTSP地址的输入框和按钮
                config_file = 'config/ip.json' #指定配置文件的路径
                if not os.path.exists(config_file): #检查配置文件是否存在
                        ip = "rtsp://admin:admin888@192.168.1.67:555" #默认的RTSP地址
                        new_config = {"ip": ip} #创建新字典将默认RTSP地址储存到字典中
                        new_json = json.dumps(new_config, ensure_ascii=False, indent=2) #将字典new_config转化为格式化的json字符串，并写入文件ip.json
                        with open(config_file, 'w', encoding='utf-8') as f:
                                f.write(new_json)
                else:
                        config = json.load(open(config_file, 'r', encoding='utf-8'))
                        ip = config['ip']
                self.rtsp_window.rtspEdit.setText(ip) #将读取到的RTSP地址设置到窗口中的输入框rtspEdit中
                self.rtsp_window.show() #显示RTSP设置窗口
                self.rtsp_window.rtspButton.clicked.connect(lambda: self.load_rtsp(self.rtsp_window.rtspEdit.text())) #连接按钮的点击事件
        #用来处理用户界面不同空间传入的flag参数，进行更新操作。
        def change_val(self, x, flag):
                if flag == 'confSpinBox':
                        self.confSlider.setValue(int(x * 100))
                elif flag == 'confSlider':
                        self.confSpinBox.setValue(x / 100)
                        self.det_thread.conf_thres = x / 100
                elif flag == 'iouSpinBox':
                        self.iouSlider.setValue(int(x * 100))
                elif flag == 'iouSlider':
                        self.iouSpinBox.setValue(x / 100)
                        self.det_thread.iou_thres = x / 100
                elif flag == 'rateSpinBox':
                        self.rateSlider.setValue(x)
                elif flag == 'rateSlider':
                        self.rateSpinBox.setValue(x)
                        self.det_thread.rate = x * 10
                else:
                        pass
        #更新界面上的一个标签（statistic_label)内的文本，显示传入的消息msg
        def statistic_msg(self, msg):
                self.statistic_label.setText(msg)
                # self.qtimer.start(3000)
        #在GUI中展示一条消息，并根据消息内容执行一些其他操作
        def show_msg(self, msg):
                self.runButton.setChecked(Qt.Unchecked)
                self.statistic_msg(msg)
                if msg == "Finished":
                        self.saveCheckBox.setEnabled(True)
        #根据用户选择的模型类型来更新路径
        def change_model(self, x):
                self.model_type = self.comboBox.currentText()
                self.det_thread.weights = "./pt/%s" % self.model_type
                self.statistic_msg('Change model to %s' % x)
        #一个打开文件选择对话框，用户选择一个视频或图像文件，并将所选文件路径存储到程序中，同时更新程序配置文件
        def open_file(self):

                config_file = 'config/fold.json' #定义了一个字符串，表示配置文件的路径。用于保存程序的设置。
                # config = json.load(open(config_file, 'r', encoding='utf-8'))
                config = json.load(open(config_file, 'r', encoding='utf-8'))
                open_fold = config['open_fold'] #从config字典中获取open_fold键的值
                if not os.path.exists(open_fold):
                        open_fold = os.getcwd()
                name, _ = QFileDialog.getOpenFileName(self, 'Video/image', open_fold,
                                                      "Pic File(*.mp4 *.mkv *.avi *.flv "
                                                      "*.jpg *.png)")
                if name: #如果用户选择了文件（即name不为空）执行以下代码
                        self.det_thread.source = name
                        self.statistic_msg('Loaded file：{}'.format(os.path.basename(name)))
                        config['open_fold'] = os.path.dirname(name)
                        config_json = json.dumps(config, ensure_ascii=False, indent=2)
                        with open(config_file, 'w', encoding='utf-8') as f:
                                f.write(config_json)
                        self.stop()
        # 根据某个按钮的状态来决定窗口的显示方式
        def max_or_restore(self):
                if self.maxButton.isChecked():  #检查maxButton是否被选中
                        self.showMaximized() #最大化
                else:
                        self.showNormal()
        #根据按钮状态来控制某些操作的执行
        def run_or_continue(self):
            global tsleep
            self.det_thread.jump_out = False #让det_thread进程不会中断或跳出
            print("1")
            print(self.runButton.isChecked())
            print(truning) #打印语句用于调试，输出按钮的状态（是否被勾选）和 truning 的值。
            if (self.runButton.isChecked() == True) & (truning == False): #如果按钮被勾选的话，开始运行检测任务
                self.saveCheckBox.setEnabled(False) #禁用 saveCheckBox，即在检测任务运行时不允许更改该复选框的状态。
                self.det_thread.is_continue = True #表示可以继续检测任务
                if not self.det_thread.isRunning():
                    self.det_thread.start()     #如果在运行det_thread的话，启动线程
                source = os.path.basename(self.det_thread.source) #提取det_thread.source 的文件名，并根据该文件名是否是数字来判断是否将其设置为 'camera'，否则使用原文件名。
                source = 'camera' if source.isnumeric() else source
                self.statistic_msg('Detecting >> model：{}，file：{}'. #打印当前检测的模型和文件的相关信息。
                                   format(os.path.basename(self.det_thread.weights),
                                          source))
            else:
                if ((self.runButton.isChecked() == False) & (truning == True)): #runButton没有被公选，暂停检测任务，打印pause
                    self.statistic_msg('Pause')
                    tsleep = True
                elif ((self.runButton.isChecked() == True) & (truning == True)): #runButton被勾选，继续检测任务，打印相关信息
                    tsleep = False
                    source = 'screenCapture'
                    self.statistic_msg('Detecting >> model：{}，file：{}'.
                                       format(os.path.basename(self.det_thread.weights),
                                              source))
                else: #其他情况下，打印pause信息，表示任务暂停
                    self.det_thread.is_continue = False
                    self.statistic_msg('Pause')
        # 用于停止或中断检测任务，并恢复一些界面元素的状态
        def stop(self):
            self.det_thread.jump_out = True #让测试线程中止或退出某个操作
            self.saveCheckBox.setEnabled(True) #关于复选框设置
        #事件处理函数，用于处理鼠标点击事件
        def mousePressEvent(self, event):
            self.m_Position = event.pos() #获取鼠标点击时的坐标
            if event.button() == Qt.LeftButton: #判断是不是左键点击
                if 0 < self.m_Position.x() < self.groupBox.pos().x() + self.groupBox.width() and \
                        0 < self.m_Position.y() < self.groupBox.pos().y() + self.groupBox.height():
                    self.m_flag = True #在某处左键点击，设置m_flag = true；
        #事件处理函数，用于处理鼠标移动事件
        def mouseMoveEvent(self, QMouseEvent):
            if Qt.LeftButton and self.m_flag: #是否是鼠标左键 且 m_flag = true
                self.move(QMouseEvent.globalPos() - self.m_Position) #使窗口可以跟随鼠标移动
        #事件处理函数，当鼠标按钮被释放时m_flag设为false
        def mouseReleaseEvent(self, QMouseEvent):
            self.m_flag = False

        @staticmethod  #将下面的操作标记为静态方式
        #一个静态方法，，用于在标签上显示一个图像img_src
        def show_image(img_src, label):
            try:
                ih, iw, _ = img_src.shape #获取图像的高度、宽度
                #下面两行：获取标签的宽度和高度，确保图像能够根据标签的尺寸进行缩放
                w = label.geometry().width()
                h = label.geometry().height()
                # if else 语句负责根据图像的标签和尺寸，按比例缩放图像以适应标签的大小
                if iw / w > ih / h:
                    scal = w / iw
                    nw = w
                    nh = int(scal * ih)
                    img_src_ = cv2.resize(img_src, (nw, nh))

                else:
                    scal = h / ih
                    nw = int(scal * iw)
                    nh = h
                    img_src_ = cv2.resize(img_src, (nw, nh))

                frame = cv2.cvtColor(img_src_, cv2.COLOR_BGR2RGB) #用openCV函数将cv2.cvtcolor将图像从BGR转成RGB颜色格式
                #将处理后的图像数据转换为 Qt 可显示的 QImage 格式。
                img = QImage(frame.data, frame.shape[1], frame.shape[0], frame.shape[2] * frame.shape[1],
                             QImage.Format_RGB888)
                #将该图像显示在一个 QLabel 控件中。
                label.setPixmap(QPixmap.fromImage(img))
            #捕获代码异常
            except Exception as e:
                print(repr(e))
        #用于显示统计数据，通过图形界面控件展示结果（在GUI上展示统计信息）
        def show_statistic(self, statistic_dic):
            try:
                self.resultWidget.clear() #清空resultWidget中的所有内容
                statistic_dic = sorted(statistic_dic.items(), key=lambda x: x[1], reverse=True) #将传入的字典按照字典的值进行排序
                statistic_dic = [i for i in statistic_dic if i[1] > 0] #过滤掉值为 0 或更小的项，只保留值大于 0 的统计数据。并生成一个表来储存
                results = [' ' + str(i[0]) + '：' + str(i[1]) for i in statistic_dic] #生成一个新的列表 results，其中每个元素是一个字符串，表示统计数据的键和值。i[0] 是字典的键，i[1] 是字典的值。
                self.resultWidget.addItems(results) #将列表中的每一项都添加到resultWidget中
        #进行异常处理
            except Exception as e:
                print(repr(e))
        #事件处理函数，用于处理窗口关闭的操作
        def closeEvent(self, event):
            self.det_thread.jump_out = True #通知某个正在运行的线程停止或退出
            #配置数据收集
            config_file = 'config/setting.json'
            config = dict()
            config['iou'] = self.confSpinBox.value() #数据输入框SpinBox的值
            config['conf'] = self.iouSpinBox.value() #数据输入框iouSpinBox的值
            config['rate'] = self.rateSpinBox.value() #数据输入框rateSpinBox的值
            config['check'] = self.checkBox.checkState() #复选框的状态，checkState返回一个值表示复选框是否被选中
            config['savecheck'] = self.saveCheckBox.checkState()
            config_json = json.dumps(config, ensure_ascii=False, indent=2) #将这些收集的配置项存储在字典config中
            #配置保存为JSON
            with open(config_file, 'w', encoding='utf-8') as f:
                f.write(config_json)
            #显示关闭提示框
            MessageBox(
                self.closeButton, title='Tips', text='Closing the program', time=2000, auto=True).exec_()
            #退出程序
            sys.exit(0)

#定义一个DetThread类，继承自Qthread，用于在独立线程中执行检测任务。
class DetThread(QThread):
    send_img = pyqtSignal(np.ndarray) #用于传输图像数据
    send_raw = pyqtSignal(np.ndarray)   #传输原始图像数据
    send_statistic = pyqtSignal(dict)   #传输统计数据，以字典的形式发送
    # emit：detecting/pause/stop/finished/error msg
    send_msg = pyqtSignal(str) #发送字符串消息，可用来通知程序状态或错误信息
    send_percent = pyqtSignal(int) #传输进度条的百分比
    send_fps = pyqtSignal(str) #发送帧率信息，用于视频处理或实时检测
    send_bboxes = pyqtSignal(np.ndarray) #发送边界框数据，通常用于目标检测，标记目标物体在图像中的位置
    #初始化类：DetThread
    def __init__(self):
        super(DetThread, self).__init__() #调用父类QThread的构造函数，确保继承自QThread的类可以正确初始化
        #Ps：QThread 是 PyQt 的一个线程类，继承它后可以在后台线程中执行任务。
        # 指定YOLOv5模型的权重文件
        self.weights = './pt/yolov5CW.pt'
        self.current_weight = './pt/yolov5CW.pt'
        #指定了输入数据源，‘0’表示默认摄像头
        self.source = '0'
        #置信度阈值设置为0.25
        self.conf_thres = 0.25
        #交并比IoU设置为0.45
        self.iou_thres = 0.45
        #标志变量，默认为False，检测继续进行；如果设置为true，检测任务会跳出或停止
        self.jump_out = False  # jump out of the loop
        self.is_continue = True  # continue/pause
        #设置进度条长度
        self.percent_length = 1000  # progress bar
        #控制是否启用延迟检查
        self.rate_check = True  # Whether to enable delay
        #与任务的执行速率或延迟相关
        self.rate = 100
        #设置保存路径
        self.save_fold = './result'

    @torch.no_grad()
    #改装饰器使得在推理过程中禁用梯度计算，从而提高推理效率，并节省内存
    def run(self,
            imgsz=640,  # 输入图像尺寸
            max_det=1000,  # 最多放1000张图片
            device='cpu',  # 用cpu或者gpu来检测
            view_img=True,  # 显示结果，以图像形式弹出
            save_txt=False,  # 检测结果保存为txt
            save_conf=False,  # 在txt标签文件中保存每个目标的置信度分数
            save_crop=False,  # 保存目标检测的裁剪框
            nosave=False,  # false表示保存检测结果
            classes=None,  # 可以设置只关心识别的类别，none表示全关心
            agnostic_nms=False,  # 是否使用NMS
            augment=False,  # 是否进行增强推理
            visualize=False,  # 是否可视化模型的特征图
            update=False,  # 是否更新模型
            project='runs/detect',  # 结果保存路径
            name='exp',  # 实验/项目的名称，保留在project/name目录下。默认是exp
            exist_ok=False,  # 出错时抛出错误，如果为true，会直接覆盖文件
            line_thickness=3,  # 边界框的线条粗细，单位为像素
            hide_labels=False,  # 是否隐藏标签
            hide_conf=False,  # 是否隐藏目标的置信度
            half=False,  # 是否使用半精度浮点数进行推理
            ):

        # Initialize
        try:
            device = select_device(device) #选择设备
            half &= device.type != 'cpu'  # half precision only supported on CUDA

            # 加载模型
            model = attempt_load(self.weights, map_location=device)  # load FP32 model
            num_params = 0
            for param in model.parameters():
                num_params += param.numel()
            stride = int(model.stride.max())  # model stride
            imgsz = check_img_size(imgsz, s=stride)  # check image size
            a = model.module.names if hasattr(model, 'module') else model.names  # get class names
            print(a)
            names = list(a.values())
            print(names)
            if half:
                model.half()  # to FP16

            # Dataloader
            if self.source.isnumeric() or self.source.lower().startswith(('rtsp://', 'rtmp://', 'http://', 'https://')):
                view_img = check_imshow()
                cudnn.benchmark = True  # set True to speed up constant image size inference
                dataset = LoadWebcam(self.source, img_size=imgsz, stride=stride)
                # bs = len(dataset)  # batch_size
            else:
                dataset = LoadImages(self.source, img_size=imgsz, stride=stride)

            # Run inference
            if device.type != 'cpu':
                model(torch.zeros(1, 3, imgsz, imgsz).to(device).type_as(next(model.parameters())))  # run once
            count = 0
            jump_count = 0
            start_time = time.time()
            dataset = iter(dataset)

            while True:
                if self.jump_out:
                    self.vid_cap.release()
                    self.send_percent.emit(0)
                    self.send_msg.emit('Stop')
                    if hasattr(self, 'out'):
                        self.out.release()
                    break
                # change model
                if self.current_weight != self.weights:
                    # 加载模型
                    model = attempt_load(self.weights, map_location=device)  # 通过这句代码来加载预训练模型
                    num_params = 0
                    for param in model.parameters():
                        num_params += param.numel()
                    stride = int(model.stride.max())  # model stride
                    imgsz = check_img_size(imgsz, s=stride)  # check image size
                    names = model.module.names if hasattr(model, 'module') else model.names  # get class names
                    if half:
                        model.half()  # to FP16
                    # Run inference
                    if device.type != 'cpu':
                        model(torch.zeros(1, 3, imgsz, imgsz).to(device).type_as(next(model.parameters())))  # run once
                    self.current_weight = self.weights
                if self.is_continue:
                    path, img, im0s, self.vid_cap = next(dataset)
                    # jump_count += 1
                    # if jump_count % 5 != 0:
                    #     continue
                    count += 1
                    if count % 30 == 0 and count >= 30:
                        fps = int(30 / (time.time() - start_time))
                        self.send_fps.emit('fps：' + str(fps))
                        start_time = time.time()
                    if self.vid_cap:
                        percent = int(count / self.vid_cap.get(cv2.CAP_PROP_FRAME_COUNT) * self.percent_length)
                        self.send_percent.emit(percent)
                    else:
                        percent = self.percent_length

                    statistic_dic = {name: 0 for name in names}
                    img = torch.from_numpy(img).to(device)
                    img = img.half() if half else img.float()  # uint8 to fp16/32
                    img /= 255.0  # 0 - 255 to 0.0 - 1.0
                    if img.ndimension() == 3:
                        img = img.unsqueeze(0)

                    pred = model(img, augment=augment)[0]

                    # Apply NMS
                    pred = non_max_suppression(pred, self.conf_thres, self.iou_thres, classes, agnostic_nms,
                                               max_det=max_det)
                    # Process detections
                    for i, det in enumerate(pred):  # detections per image
                        im0 = im0s.copy()
                        annotator = Annotator(im0, line_width=line_thickness, example=str(names))
                        if len(det):
                            # Rescale boxes from img_size to im0 size
                            det[:, :4] = scale_coords(img.shape[2:], det[:, :4], im0.shape).round()

                            # Write results
                            for *xyxy, conf, cls in reversed(det):
                                c = int(cls)  # integer class
                                statistic_dic[names[c]] += 1
                                label = None if hide_labels else (names[c] if hide_conf else f'{names[c]} {conf:.2f}')
                                annotator.box_label(xyxy, label, color=colors(c, True))

                    if self.rate_check:
                        time.sleep(1 / self.rate)
                    im0 = annotator.result()
                    self.send_img.emit(im0)
                    self.send_raw.emit(im0s if isinstance(im0s, np.ndarray) else im0s[0])
                    self.send_statistic.emit(statistic_dic)
                    if self.save_fold:
                        os.makedirs(self.save_fold, exist_ok=True)
                        if self.vid_cap is None:
                            save_path = os.path.join(self.save_fold,
                                                     time.strftime('%Y_%m_%d_%H_%M_%S',
                                                                   time.localtime()) + '.jpg')
                            cv2.imwrite(save_path, im0)
                        else:
                            if count == 1:
                                ori_fps = int(self.vid_cap.get(cv2.CAP_PROP_FPS))
                                if ori_fps == 0:
                                    ori_fps = 25
                                # width = int(self.vid_cap.get(cv2.CAP_PROP_FRAME_WIDTH))
                                # height = int(self.vid_cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
                                width, height = im0.shape[1], im0.shape[0]
                                save_path = os.path.join(self.save_fold,
                                                         time.strftime('%Y_%m_%d_%H_%M_%S', time.localtime()) + '.mp4')
                                self.out = cv2.VideoWriter(save_path, cv2.VideoWriter_fourcc(*"mp4v"), ori_fps,
                                                           (width, height))
                            self.out.write(im0)
                    if percent == self.percent_length:
                        print(count)
                        self.send_percent.emit(0)
                        self.send_msg.emit('finished')
                        if hasattr(self, 'out'):
                            self.out.release()
                        break

        except Exception as e:
            print('错误类型是', e.__class__.__name__)
            print('错误明细是', e)