# -*- coding: utf-8 -*-
import os
import sys
import threading

import mss
import numpy as np
# Form implementation generated from reading ui file 'innerface.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
#pyqt5库的引用
from PyQt5.QtCore import QResource, Qt, QTimer
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog, QMenu, QAction
from PyQt5.QtCore import Qt, QPoint, QTimer, QThread, pyqtSignal
from PyQt5.QtGui import QImage, QPixmap, QPainter, QIcon, QPalette, QBrush
#图像处理和深度学习相关的导入
import sys
import json
import numpy as np
import torch
import torch.backends.cudnn as cudnn
import os
import time
import cv2
import cv2 as CV2
from PyQt5.QtWebEngineWidgets import QWebEngineView
#Web引擎相关的导入
from MouseLabel import Label_click_Mouse
from main_win.wrjGPS import wrjGPS
from models.experimental import attempt_load
from test.captureScreen import boxScreen
from utils.augmentations import letterbox
from utils.datasets import LoadImages, LoadWebcam
from utils.CustomMessageBox import MessageBox
from utils.general import check_img_size, check_requirements, check_imshow, colorstr, non_max_suppression, \
    apply_classifier, scale_coords, xyxy2xywh, strip_optimizer, set_logging, increment_path
# from utils.plots import colors, plot_one_box, plot_one_box_PIL
from utils.plots import Annotator, colors, save_one_box
from utils.torch_utils import select_device
from utils.capnums import Camera
from dialog.rtsp_win import Window

img_src = np.zeros((1280, 720, 3), np.uint8)
COLORS = [
    (0, 0, 255), (255, 0, 0), (0, 255, 0), (255, 255, 0), (0, 255, 255),
    (255, 0, 255), (192, 192, 192), (128, 128, 128), (128, 0, 0),
    (128, 128, 0), (0, 128, 0)]
LABELS = ['', 'erosion', 'crack', 'sandhole']
img_src = cv2.imread('F:\science_study\sea win eletronic detect\data\selfCreate\images\\40.jpg')
tclose=False
truning=False
tsleep=False

QResource.registerResource("apprcc.qrc")
class Ui_mainWindow(object):
    def setupUi(self, mainWindow):
        mainWindow.setObjectName("mainWindow")
        mainWindow.resize(1394, 762)
        mainWindow.setMouseTracking(True)
        mainWindow.setWindowIcon(QIcon("img/imageonline-co-pngtoicoimage.ico"))
        self.centralwidget = QtWidgets.QWidget(mainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.groupBox_18 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_18.setTitle("")
        self.groupBox_18.setObjectName("groupBox_18")
        self.groupBox_18.setStyleSheet("#groupBox_18{border-image: url(icon/background.jpg);\n"
                                       "border: 0px solid #42adff;\n"
                                       "border-radius:5px;}")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.groupBox_18)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setSpacing(0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.groupBox = QtWidgets.QGroupBox(self.groupBox_18)
        self.groupBox.setMinimumSize(QtCore.QSize(0, 45))
        self.groupBox.setMaximumSize(QtCore.QSize(16777215, 45))
        self.groupBox.setStyleSheet("#groupBox{\n"
                                    "background-color: rgba(75, 75, 75, 200);\n"
                                    "border: 0px solid #42adff;\n"
                                    "border-left: 0px solid rgba(29, 83, 185, 255);\n"
                                    "border-right: 0px solid rgba(29, 83, 185, 255);\n"
                                    "border-bottom: 1px solid rgba(200, 200, 200,100);\n"
                                    ";\n"
                                    "border-radius:0px;}")
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.groupBox)
        self.horizontalLayout.setContentsMargins(-1, 0, -1, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_7 = QtWidgets.QLabel(self.groupBox)
        self.label_7.setMinimumSize(QtCore.QSize(50, 50))
        self.label_7.setMaximumSize(QtCore.QSize(50, 50))
        self.label_7.setStyleSheet("image: url(icon/hsfdlogonbc.png);")
        self.label_7.setText("")
        self.label_7.setObjectName("label_7")
        self.horizontalLayout.addWidget(self.label_7)
        self.label_4 = QtWidgets.QLabel(self.groupBox)
        self.label_4.setStyleSheet("QLabel\n"
                                   "{\n"
                                   "    font-size: 24px;\n"
                                   "    font-family: \"Microsoft YaHei\";\n"
                                   "    font-weight: bold;\n"
                                   "         border-radius:9px;\n"
                                   "        background:rgba(66, 195, 255, 0);\n"
                                   "color: white;\n"
                                   "}\n"
                                   "")
        self.label_4.setObjectName("label_4")
        self.horizontalLayout.addWidget(self.label_4)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setSpacing(0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.minButton = QtWidgets.QPushButton(self.groupBox)
        self.minButton.setMinimumSize(QtCore.QSize(50, 28))
        self.minButton.setMaximumSize(QtCore.QSize(50, 28))
        self.minButton.setStyleSheet("QPushButton {\n"
                                     "border-style: solid;\n"
                                     "border-width: 0px;\n"
                                     "border-radius: 0px;\n"
                                     "background-color: rgba(223, 223, 223, 0);}\n"
                                     "QPushButton::focus{outline: none;}\n"
                                     "QPushButton::hover {\n"
                                     "border-style: solid;\n"
                                     "border-width: 0px;\n"
                                     "border-radius: 0px;\n"
                                     "background-color: rgba(223, 223, 223, 150);}")
        self.minButton.setText("")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/img/icon/最小化.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.minButton.setIcon(icon1)
        self.minButton.setObjectName("minButton")
        self.horizontalLayout_5.addWidget(self.minButton)
        self.maxButton = QtWidgets.QPushButton(self.groupBox)
        self.maxButton.setMinimumSize(QtCore.QSize(50, 28))
        self.maxButton.setMaximumSize(QtCore.QSize(50, 28))
        self.maxButton.setStyleSheet("QPushButton {\n"
                                     "border-style: solid;\n"
                                     "border-width: 0px;\n"
                                     "border-radius: 0px;\n"
                                     "background-color: rgba(223, 223, 223, 0);}\n"
                                     "QPushButton::focus{outline: none;}\n"
                                     "QPushButton::hover {\n"
                                     "border-style: solid;\n"
                                     "border-width: 0px;\n"
                                     "border-radius: 0px;\n"
                                     "background-color: rgba(223, 223, 223, 150);}")
        self.maxButton.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/img/icon/正方形.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon2.addPixmap(QtGui.QPixmap(":/img/icon/还原.png"), QtGui.QIcon.Active, QtGui.QIcon.On)
        icon2.addPixmap(QtGui.QPixmap(":/img/icon/还原.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.maxButton.setIcon(icon2)
        self.maxButton.setCheckable(True)
        self.maxButton.setObjectName("maxButton")
        self.horizontalLayout_5.addWidget(self.maxButton)
        self.closeButton = QtWidgets.QPushButton(self.groupBox)
        self.closeButton.setMinimumSize(QtCore.QSize(50, 28))
        self.closeButton.setMaximumSize(QtCore.QSize(50, 28))
        self.closeButton.setStyleSheet("QPushButton {\n"
                                       "border-style: solid;\n"
                                       "border-width: 0px;\n"
                                       "border-radius: 0px;\n"
                                       "background-color: rgba(223, 223, 223, 0);}\n"
                                       "QPushButton::focus{outline: none;}\n"
                                       "QPushButton::hover {\n"
                                       "border-style: solid;\n"
                                       "border-width: 0px;\n"
                                       "border-radius: 0px;\n"
                                       "background-color: rgba(223, 223, 223, 150);}")
        self.closeButton.setText("")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/img/icon/关闭.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.closeButton.setIcon(icon3)
        self.closeButton.setObjectName("closeButton")
        self.horizontalLayout_5.addWidget(self.closeButton)
        self.horizontalLayout.addLayout(self.horizontalLayout_5)
        self.verticalLayout_6.addWidget(self.groupBox)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setSpacing(0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.groupBox_8 = QtWidgets.QGroupBox(self.groupBox_18)
        self.groupBox_8.setMinimumSize(QtCore.QSize(320, 0))
        self.groupBox_8.setMaximumSize(QtCore.QSize(320, 16777215))
        self.groupBox_8.setStyleSheet("#groupBox_8{\n"
                                      "background-color: rgba(75, 75, 75, 200);\n"
                                      "border: 0px solid #42adff;\n"
                                      "border-radius:0px;}\n"
                                      "")
        self.groupBox_8.setTitle("")
        self.groupBox_8.setObjectName("groupBox_8")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.groupBox_8)
        self.verticalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_8.setSpacing(11)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.groupBox_2 = QtWidgets.QGroupBox(self.groupBox_8)
        self.groupBox_2.setMinimumSize(QtCore.QSize(0, 42))
        self.groupBox_2.setMaximumSize(QtCore.QSize(16777215, 42))
        self.groupBox_2.setStyleSheet("#groupBox_2{\n"
                                      "border: 0px solid #42adff;\n"
                                      "border-bottom: 1px solid rgba(200, 200, 200,100);\n"
                                      "border-radius:0px;}")
        self.groupBox_2.setTitle("")
        self.groupBox_2.setObjectName("groupBox_2")
        self.horizontalLayout_35 = QtWidgets.QHBoxLayout(self.groupBox_2)
        self.horizontalLayout_35.setContentsMargins(11, 0, 11, 0)
        self.horizontalLayout_35.setObjectName("horizontalLayout_35")
#         self.label_5 = QtWidgets.QLabel(self.groupBox_2)
#         self.label_5.setMinimumSize(QtCore.QSize(0, 0))
#         self.label_5.setMaximumSize(QtCore.QSize(16777215, 40))
#         self.label_5.setStyleSheet("QLabel\n"
# "{\n"
# "    font-size: 22px;\n"
# "    font-family: \"Microsoft YaHei\";\n"
# "    font-weight: bold;\n"
# "         border-radius:9px;\n"
# "        background:rgba(66, 195, 255, 0);\n"
# "color: rgb(218, 218, 218);\n"
# "\n"
# "}\n"
# "")
        self.wrjButton = QtWidgets.QPushButton(self.groupBox_2)
        self.wrjButton.setMinimumSize(QtCore.QSize(55, 28))
        self.wrjButton.setMaximumSize(QtCore.QSize(16777215, 28))
        self.wrjButton.setStyleSheet("QPushButton{font-family: \"Microsoft YaHei\";\n"
                                        "font-size: 20px;\n"
                                        "font-weight: bold;\n"
                                        "color: rgb(218, 218, 218);\n"
                                        "text-align: center center;\n"
                                        "padding-left: 5px;\n"
                                        "padding-right: 5px;\n"
                                        "padding-top: 4px;\n"
                                        "padding-bottom: 4px;\n"
                                        "border-style: solid;\n"
                                        "border-width: 0px;\n"
                                        "border-color: rgba(255, 255, 255, 255);\n"
                                        "border-radius: 3px;\n"
                                        "background-color: rgba(48,148,243,0);}\n"
                                        "\n"
                                        "QPushButton:focus{outline: none;}\n"
                                        "\n"
                                        "QPushButton::pressed{font-family: \"Microsoft YaHei\";\n"
                                        "                     font-size: 14px;\n"
                                        "                     font-weight: bold;\n"
                                        "                     color:rgb(200,200,200);\n"
                                        "                     text-align: center center;\n"
                                        "                     padding-left: 5px;\n"
                                        "                     padding-right: 5px;\n"
                                        "                     padding-top: 4px;\n"
                                        "                     padding-bottom: 4px;\n"
                                        "                     border-style: solid;\n"
                                        "                     border-width: 0px;\n"
                                        "                     border-color: rgba(255, 255, 255, 255);\n"
                                        "                     border-radius: 3px;\n"
                                        "                     background-color:  #bf513b;}\n"
                                        "\n"
                                        "QPushButton::disabled{font-family: \"Microsoft YaHei\";\n"
                                        "                     font-size: 14px;\n"
                                        "                     font-weight: bold;\n"
                                        "                     color:rgb(200,200,200);\n"
                                        "                     text-align: center center;\n"
                                        "                     padding-left: 5px;\n"
                                        "                     padding-right: 5px;\n"
                                        "                     padding-top: 4px;\n"
                                        "                     padding-bottom: 4px;\n"
                                        "                     border-style: solid;\n"
                                        "                     border-width: 0px;\n"
                                        "                     border-color: rgba(255, 255, 255, 255);\n"
                                        "                     border-radius: 3px;\n"
                                        "                     background-color:  #bf513b;}\n"
                                        "QPushButton::hover {\n"
                                        "border-style: solid;\n"
                                        "border-width: 0px;\n"
                                        "border-radius: 0px;\n"
                                        "background-color: rgba(48,148,243,80);}")
        self.wrjButton.setText("开启无人机位置定位")
        icon71 = QtGui.QIcon()
        icon71.addPixmap(QtGui.QPixmap("icon/wrj.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.wrjButton.setIcon(icon71)
        self.wrjButton.setIconSize(QtCore.QSize(30, 30))
        self.wrjButton.setObjectName("wrjButton")
        self.horizontalLayout_35.addWidget(self.wrjButton)


        spacerItem1 = QtWidgets.QSpacerItem(37, 39, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_35.addItem(spacerItem1)
        self.verticalLayout_8.addWidget(self.groupBox_2)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setContentsMargins(11, -1, 11, -1)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_3 = QtWidgets.QLabel(self.groupBox_8)
        self.label_3.setMinimumSize(QtCore.QSize(0, 28))
        self.label_3.setMaximumSize(QtCore.QSize(80, 16777215))
        self.label_3.setStyleSheet("QLabel\n"
                                   "{\n"
                                   "    font-size: 18px;\n"
                                   "    font-family: \"Microsoft YaHei\";\n"
                                   "    font-weight: bold;\n"
                                   "         border-radius:9px;\n"
                                   "        background:rgba(66, 195, 255, 0);\n"
                                   "color: rgb(218, 218, 218);\n"
                                   "}\n"
                                   "")
        self.label_3.setObjectName("label_3")
        self.horizontalLayout_2.addWidget(self.label_3)
        self.comboBox = QtWidgets.QComboBox(self.groupBox_8)
        self.comboBox.setMinimumSize(QtCore.QSize(0, 28))
        self.comboBox.setStyleSheet("QComboBox QAbstractItemView {\n"
                                    "font-family: \"Microsoft YaHei\";\n"
                                    "font-size: 16px;\n"
                                    "background:rgba(200, 200, 200,150);\n"
                                    "selection-background-color: rgba(200, 200, 200,50);\n"
                                    "color: rgb(218, 218, 218);\n"
                                    "outline:none;\n"
                                    "border:none;}\n"
                                    "QComboBox{\n"
                                    "font-family: \"Microsoft YaHei\";\n"
                                    "font-size: 16px;\n"
                                    "color: rgb(218, 218, 218);\n"
                                    "border-width:0px;\n"
                                    "border-color:white;\n"
                                    "border-style:solid;\n"
                                    "background-color: rgba(200, 200, 200,0);}\n"
                                    "\n"
                                    "QComboBox::drop-down {\n"
                                    "margin-top:8;\n"
                                    "height:20;\n"
                                    "background:rgba(255,255,255,0);\n"
                                    "border-image: url(:/img/icon/下拉_白色.png);\n"
                                    "}\n"
                                    "")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.horizontalLayout_2.addWidget(self.comboBox)
        self.verticalLayout_8.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setContentsMargins(11, -1, 0, -1)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.label_10 = QtWidgets.QLabel(self.groupBox_8)
        self.label_10.setMaximumSize(QtCore.QSize(80, 16777215))
        self.label_10.setStyleSheet("QLabel\n"
                                    "{\n"
                                    "    font-size: 18px;\n"
                                    "    font-family: \"Microsoft YaHei\";\n"
                                    "    font-weight: bold;\n"
                                    "         border-radius:9px;\n"
                                    "        background:rgba(66, 195, 255, 0);\n"
                                    "color: rgb(218, 218, 218);\n"
                                    "}\n"
                                    "")
        self.label_10.setObjectName("label_10")
        self.horizontalLayout_9.addWidget(self.label_10)
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.groupBox_5 = QtWidgets.QGroupBox(self.groupBox_8)
        self.groupBox_5.setStyleSheet("#groupBox_5{\n"
                                      "background-color: rgba(48,148,243,0);\n"
                                      "border: 0px solid #42adff;\n"
                                      "border-left: 0px solid #d9d9d9;\n"
                                      "border-right: 0px solid rgba(29, 83, 185, 255);\n"
                                      "border-radius:0px;}")
        self.groupBox_5.setTitle("")
        self.groupBox_5.setObjectName("groupBox_5")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.groupBox_5)
        self.horizontalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")

        self.screenButton = QtWidgets.QPushButton(self.groupBox_5)
        self.screenButton.setMinimumSize(QtCore.QSize(55, 28))
        self.screenButton.setMaximumSize(QtCore.QSize(16777215, 28))
        self.screenButton.setStyleSheet("QPushButton{font-family: \"Microsoft YaHei\";\n"
                                        "font-size: 14px;\n"
                                        "font-weight: bold;\n"
                                        "color:white;\n"
                                        "text-align: center center;\n"
                                        "padding-left: 5px;\n"
                                        "padding-right: 5px;\n"
                                        "padding-top: 4px;\n"
                                        "padding-bottom: 4px;\n"
                                        "border-style: solid;\n"
                                        "border-width: 0px;\n"
                                        "border-color: rgba(255, 255, 255, 255);\n"
                                        "border-radius: 3px;\n"
                                        "background-color: rgba(48,148,243,0);}\n"
                                        "\n"
                                        "QPushButton:focus{outline: none;}\n"
                                        "\n"
                                        "QPushButton::pressed{font-family: \"Microsoft YaHei\";\n"
                                        "                     font-size: 14px;\n"
                                        "                     font-weight: bold;\n"
                                        "                     color:rgb(200,200,200);\n"
                                        "                     text-align: center center;\n"
                                        "                     padding-left: 5px;\n"
                                        "                     padding-right: 5px;\n"
                                        "                     padding-top: 4px;\n"
                                        "                     padding-bottom: 4px;\n"
                                        "                     border-style: solid;\n"
                                        "                     border-width: 0px;\n"
                                        "                     border-color: rgba(255, 255, 255, 255);\n"
                                        "                     border-radius: 3px;\n"
                                        "                     background-color:  #bf513b;}\n"
                                        "\n"
                                        "QPushButton::disabled{font-family: \"Microsoft YaHei\";\n"
                                        "                     font-size: 14px;\n"
                                        "                     font-weight: bold;\n"
                                        "                     color:rgb(200,200,200);\n"
                                        "                     text-align: center center;\n"
                                        "                     padding-left: 5px;\n"
                                        "                     padding-right: 5px;\n"
                                        "                     padding-top: 4px;\n"
                                        "                     padding-bottom: 4px;\n"
                                        "                     border-style: solid;\n"
                                        "                     border-width: 0px;\n"
                                        "                     border-color: rgba(255, 255, 255, 255);\n"
                                        "                     border-radius: 3px;\n"
                                        "                     background-color:  #bf513b;}\n"
                                        "QPushButton::hover {\n"
                                        "border-style: solid;\n"
                                        "border-width: 0px;\n"
                                        "border-radius: 0px;\n"
                                        "background-color: rgba(48,148,243,80);}")
        self.screenButton.setText("")
        icon71 = QtGui.QIcon()
        icon71.addPixmap(QtGui.QPixmap("icon/屏幕输入流.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.screenButton.setIcon(icon71)
        self.screenButton.setIconSize(QtCore.QSize(40, 40))
        self.screenButton.setObjectName("cameraButton")
        self.horizontalLayout_8.addWidget(self.screenButton)

        self.fileButton = QtWidgets.QPushButton(self.groupBox_5)
        self.fileButton.setMinimumSize(QtCore.QSize(55, 28))
        self.fileButton.setMaximumSize(QtCore.QSize(16777215, 28))
        self.fileButton.setStyleSheet("QPushButton{font-family: \"Microsoft YaHei\";\n"
                                      "font-size: 14px;\n"
                                      "font-weight: bold;\n"
                                      "color:white;\n"
                                      "text-align: center center;\n"
                                      "padding-left: 5px;\n"
                                      "padding-right: 5px;\n"
                                      "padding-top: 4px;\n"
                                      "padding-bottom: 4px;\n"
                                      "border-style: solid;\n"
                                      "border-width: 0px;\n"
                                      "border-color: rgba(255, 255, 255, 255);\n"
                                      "border-radius: 3px;\n"
                                      "background-color: rgba(200, 200, 200,0);}\n"
                                      "\n"
                                      "QPushButton:focus{outline: none;}\n"
                                      "\n"
                                      "QPushButton::pressed{font-family: \"Microsoft YaHei\";\n"
                                      "                     font-size: 14px;\n"
                                      "                     font-weight: bold;\n"
                                      "                     color:rgb(200,200,200);\n"
                                      "                     text-align: center center;\n"
                                      "                     padding-left: 5px;\n"
                                      "                     padding-right: 5px;\n"
                                      "                     padding-top: 4px;\n"
                                      "                     padding-bottom: 4px;\n"
                                      "                     border-style: solid;\n"
                                      "                     border-width: 0px;\n"
                                      "                     border-color: rgba(255, 255, 255, 255);\n"
                                      "                     border-radius: 3px;\n"
                                      "                     background-color:  #bf513b;}\n"
                                      "\n"
                                      "QPushButton::disabled{font-family: \"Microsoft YaHei\";\n"
                                      "                     font-size: 14px;\n"
                                      "                     font-weight: bold;\n"
                                      "                     color:rgb(200,200,200);\n"
                                      "                     text-align: center center;\n"
                                      "                     padding-left: 5px;\n"
                                      "                     padding-right: 5px;\n"
                                      "                     padding-top: 4px;\n"
                                      "                     padding-bottom: 4px;\n"
                                      "                     border-style: solid;\n"
                                      "                     border-width: 0px;\n"
                                      "                     border-color: rgba(255, 255, 255, 255);\n"
                                      "                     border-radius: 3px;\n"
                                      "                     background-color:  #bf513b;}\n"
                                      "QPushButton::hover {\n"
                                      "border-style: solid;\n"
                                      "border-width: 0px;\n"
                                      "border-radius: 0px;\n"
                                      "background-color: rgba(48,148,243,80);}")
        self.fileButton.setText("")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/img/icon/打开.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.fileButton.setIcon(icon4)
        self.fileButton.setObjectName("fileButton")
        self.horizontalLayout_8.addWidget(self.fileButton)
        self.cameraButton = QtWidgets.QPushButton(self.groupBox_5)
        self.cameraButton.setMinimumSize(QtCore.QSize(55, 28))
        self.cameraButton.setMaximumSize(QtCore.QSize(16777215, 28))
        self.cameraButton.setStyleSheet("QPushButton{font-family: \"Microsoft YaHei\";\n"
                                        "font-size: 14px;\n"
                                        "font-weight: bold;\n"
                                        "color:white;\n"
                                        "text-align: center center;\n"
                                        "padding-left: 5px;\n"
                                        "padding-right: 5px;\n"
                                        "padding-top: 4px;\n"
                                        "padding-bottom: 4px;\n"
                                        "border-style: solid;\n"
                                        "border-width: 0px;\n"
                                        "border-color: rgba(255, 255, 255, 255);\n"
                                        "border-radius: 3px;\n"
                                        "background-color: rgba(48,148,243,0);}\n"
                                        "\n"
                                        "QPushButton:focus{outline: none;}\n"
                                        "\n"
                                        "QPushButton::pressed{font-family: \"Microsoft YaHei\";\n"
                                        "                     font-size: 14px;\n"
                                        "                     font-weight: bold;\n"
                                        "                     color:rgb(200,200,200);\n"
                                        "                     text-align: center center;\n"
                                        "                     padding-left: 5px;\n"
                                        "                     padding-right: 5px;\n"
                                        "                     padding-top: 4px;\n"
                                        "                     padding-bottom: 4px;\n"
                                        "                     border-style: solid;\n"
                                        "                     border-width: 0px;\n"
                                        "                     border-color: rgba(255, 255, 255, 255);\n"
                                        "                     border-radius: 3px;\n"
                                        "                     background-color:  #bf513b;}\n"
                                        "\n"
                                        "QPushButton::disabled{font-family: \"Microsoft YaHei\";\n"
                                        "                     font-size: 14px;\n"
                                        "                     font-weight: bold;\n"
                                        "                     color:rgb(200,200,200);\n"
                                        "                     text-align: center center;\n"
                                        "                     padding-left: 5px;\n"
                                        "                     padding-right: 5px;\n"
                                        "                     padding-top: 4px;\n"
                                        "                     padding-bottom: 4px;\n"
                                        "                     border-style: solid;\n"
                                        "                     border-width: 0px;\n"
                                        "                     border-color: rgba(255, 255, 255, 255);\n"
                                        "                     border-radius: 3px;\n"
                                        "                     background-color:  #bf513b;}\n"
                                        "QPushButton::hover {\n"
                                        "border-style: solid;\n"
                                        "border-width: 0px;\n"
                                        "border-radius: 0px;\n"
                                        "background-color: rgba(48,148,243,80);}")
        self.cameraButton.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/img/icon/摄像头开.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.cameraButton.setIcon(icon5)
        self.cameraButton.setObjectName("cameraButton")
        self.horizontalLayout_8.addWidget(self.cameraButton)
        self.rtspButton = QtWidgets.QPushButton(self.groupBox_5)
        self.rtspButton.setMinimumSize(QtCore.QSize(55, 28))
        self.rtspButton.setMaximumSize(QtCore.QSize(16777215, 28))
        self.rtspButton.setStyleSheet("QPushButton{font-family: \"Microsoft YaHei\";\n"
                                      "font-size: 14px;\n"
                                      "font-weight: bold;\n"
                                      "color:white;\n"
                                      "text-align: center center;\n"
                                      "padding-left: 5px;\n"
                                      "padding-right: 5px;\n"
                                      "padding-top: 4px;\n"
                                      "padding-bottom: 4px;\n"
                                      "border-style: solid;\n"
                                      "border-width: 0px;\n"
                                      "border-color: rgba(255, 255, 255, 255);\n"
                                      "border-radius: 3px;\n"
                                      "background-color: rgba(48,148,243,0);}\n"
                                      "\n"
                                      "QPushButton:focus{outline: none;}\n"
                                      "\n"
                                      "QPushButton::pressed{font-family: \"Microsoft YaHei\";\n"
                                      "                     font-size: 14px;\n"
                                      "                     font-weight: bold;\n"
                                      "                     color:rgb(200,200,200);\n"
                                      "                     text-align: center center;\n"
                                      "                     padding-left: 5px;\n"
                                      "                     padding-right: 5px;\n"
                                      "                     padding-top: 4px;\n"
                                      "                     padding-bottom: 4px;\n"
                                      "                     border-style: solid;\n"
                                      "                     border-width: 0px;\n"
                                      "                     border-color: rgba(255, 255, 255, 255);\n"
                                      "                     border-radius: 3px;\n"
                                      "                     background-color:  #bf513b;}\n"
                                      "\n"
                                      "QPushButton::disabled{font-family: \"Microsoft YaHei\";\n"
                                      "                     font-size: 14px;\n"
                                      "                     font-weight: bold;\n"
                                      "                     color:rgb(200,200,200);\n"
                                      "                     text-align: center center;\n"
                                      "                     padding-left: 5px;\n"
                                      "                     padding-right: 5px;\n"
                                      "                     padding-top: 4px;\n"
                                      "                     padding-bottom: 4px;\n"
                                      "                     border-style: solid;\n"
                                      "                     border-width: 0px;\n"
                                      "                     border-color: rgba(255, 255, 255, 255);\n"
                                      "                     border-radius: 3px;\n"
                                      "                     background-color:  #bf513b;}\n"
                                      "QPushButton::hover {\n"
                                      "border-style: solid;\n"
                                      "border-width: 0px;\n"
                                      "border-radius: 0px;\n"
                                      "background-color: rgba(48,148,243,80);}")
        self.rtspButton.setText("")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/img/icon/实时视频流解析.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.rtspButton.setIcon(icon6)
        self.rtspButton.setObjectName("rtspButton")
        self.horizontalLayout_8.addWidget(self.rtspButton)
        self.horizontalLayout_11.addWidget(self.groupBox_5)
        self.horizontalLayout_9.addLayout(self.horizontalLayout_11)
        self.verticalLayout_8.addLayout(self.horizontalLayout_9)
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setContentsMargins(11, -1, 11, -1)
        self.verticalLayout_3.setSpacing(4)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.label_2 = QtWidgets.QLabel(self.groupBox_8)
        self.label_2.setStyleSheet("QLabel\n"
                                   "{\n"
                                   "    font-size: 18px;\n"
                                   "    font-family: \"Microsoft YaHei\";\n"
                                   "    font-weight: bold;\n"
                                   "         border-radius:9px;\n"
                                   "        background:rgba(66, 195, 255, 0);\n"
                                   "color: rgb(218, 218, 218);\n"
                                   "}\n"
                                   "")
        self.label_2.setObjectName("label_2")
        self.verticalLayout_3.addWidget(self.label_2)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setSpacing(5)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.iouSpinBox = QtWidgets.QDoubleSpinBox(self.groupBox_8)
        self.iouSpinBox.setMinimumSize(QtCore.QSize(50, 0))
        self.iouSpinBox.setMaximumSize(QtCore.QSize(50, 16777215))
        self.iouSpinBox.setStyleSheet("QDoubleSpinBox{\n"
                                      "background:rgba(200, 200, 200,50);\n"
                                      "color:white;\n"
                                      "font-size: 14px;\n"
                                      "font-family: \"Microsoft YaHei UI\";\n"
                                      "border-style: solid;\n"
                                      "border-width: 1px;\n"
                                      "border-color: rgba(200, 200, 200,100);\n"
                                      "border-radius: 3px;}\n"
                                      "\n"
                                      "QDoubleSpinBox::down-button{\n"
                                      "background:rgba(200, 200, 200,0);\n"
                                      "border-image: url(:/img/icon/箭头_列表展开.png);}\n"
                                      "QDoubleSpinBox::down-button::hover{\n"
                                      "background:rgba(200, 200, 200,100);\n"
                                      "border-image: url(:/img/icon/箭头_列表展开.png);}\n"
                                      "\n"
                                      "QDoubleSpinBox::up-button{\n"
                                      "background:rgba(200, 200, 200,0);\n"
                                      "border-image: url(:/img/icon/箭头_列表收起.png);}\n"
                                      "QDoubleSpinBox::up-button::hover{\n"
                                      "background:rgba(200, 200, 200,100);\n"
                                      "border-image: url(:/img/icon/箭头_列表收起.png);}\n"
                                      "")
        self.iouSpinBox.setMaximum(1.0)
        self.iouSpinBox.setSingleStep(0.01)
        self.iouSpinBox.setProperty("value", 0.45)
        self.iouSpinBox.setObjectName("iouSpinBox")
        self.horizontalLayout_4.addWidget(self.iouSpinBox)
        self.iouSlider = QtWidgets.QSlider(self.groupBox_8)
        self.iouSlider.setStyleSheet("QSlider{\n"
                                     "border-color: #bcbcbc;\n"
                                     "color:#d9d9d9;\n"
                                     "}\n"
                                     "QSlider::groove:horizontal {                                \n"
                                     "     border: 1px solid #999999;                             \n"
                                     "     height: 3px;                                           \n"
                                     "    margin: 0px 0;                                         \n"
                                     "     left: 5px; right: 5px; \n"
                                     " }\n"
                                     "QSlider::handle:horizontal {                               \n"
                                     "     border: 0px ; \n"
                                     "     border-image: url(:/img/icon/圆.png);\n"
                                     "     width:15px;\n"
                                     "     margin: -7px -7px -7px -7px;                  \n"
                                     "} \n"
                                     "QSlider::add-page:horizontal{\n"
                                     "background: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #d9d9d9, stop:0.25 #d9d9d9, stop:0.5 #d9d9d9, stop:1 #d9d9d9); \n"
                                     "\n"
                                     "}\n"
                                     "QSlider::sub-page:horizontal{                               \n"
                                     " background: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #373737, stop:0.25 #373737, stop:0.5 #373737, stop:1 #373737);                     \n"
                                     "}")
        self.iouSlider.setMaximum(100)
        self.iouSlider.setProperty("value", 45)
        self.iouSlider.setOrientation(QtCore.Qt.Horizontal)
        self.iouSlider.setObjectName("iouSlider")
        self.horizontalLayout_4.addWidget(self.iouSlider)
        self.verticalLayout_3.addLayout(self.horizontalLayout_4)
        self.verticalLayout_8.addLayout(self.verticalLayout_3)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setContentsMargins(11, -1, 11, -1)
        self.verticalLayout.setSpacing(4)
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.groupBox_8)
        self.label.setStyleSheet("QLabel\n"
                                 "{\n"
                                 "    font-size: 18px;\n"
                                 "    font-family: \"Microsoft YaHei\";\n"
                                 "    font-weight: bold;\n"
                                 "         border-radius:9px;\n"
                                 "        background:rgba(66, 195, 255, 0);\n"
                                 "color: rgb(218, 218, 218);\n"
                                 "}\n"
                                 "")
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setSpacing(5)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.confSpinBox = QtWidgets.QDoubleSpinBox(self.groupBox_8)
        self.confSpinBox.setMinimumSize(QtCore.QSize(50, 0))
        self.confSpinBox.setMaximumSize(QtCore.QSize(50, 16777215))
        self.confSpinBox.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.confSpinBox.setStyleSheet("QDoubleSpinBox{\n"
                                       "background:rgba(200, 200, 200,50);\n"
                                       "color:white;\n"
                                       "font-size: 14px;\n"
                                       "font-family: \"Microsoft YaHei UI\";\n"
                                       "border-style: solid;\n"
                                       "border-width: 1px;\n"
                                       "border-color: rgba(200, 200, 200,100);\n"
                                       "border-radius: 3px;}\n"    
                                       "\n"
                                       "QDoubleSpinBox::down-button{\n"
                                       "background:rgba(200, 200, 200,0);\n"
                                       "border-image: url(:/img/icon/箭头_列表展开.png);}\n"
                                       "QDoubleSpinBox::down-button::hover{\n"
                                       "background:rgba(200, 200, 200,100);\n"
                                       "border-image: url(:/img/icon/箭头_列表展开.png);}\n"
                                       "\n"
                                       "QDoubleSpinBox::up-button{\n"
                                       "background:rgba(200, 200, 200,0);\n"
                                       "border-image: url(:/img/icon/箭头_列表收起.png);}\n"
                                       "QDoubleSpinBox::up-button::hover{\n"
                                       "background:rgba(200, 200, 200,100);\n"
                                       "border-image: url(:/img/icon/箭头_列表收起.png);}\n"
                                       "")
        self.confSpinBox.setMaximum(1.0)
        self.confSpinBox.setSingleStep(0.01)
        self.confSpinBox.setProperty("value", 0.25)
        self.confSpinBox.setObjectName("confSpinBox")
        self.horizontalLayout_3.addWidget(self.confSpinBox)
        self.confSlider = QtWidgets.QSlider(self.groupBox_8)
        self.confSlider.setStyleSheet("QSlider{\n"
                                      "border-color: #bcbcbc;\n"
                                      "color:#d9d9d9;\n"
                                      "}\n"
                                      "QSlider::groove:horizontal {                                \n"
                                      "     border: 1px solid #999999;                             \n"
                                      "     height: 3px;                                           \n"
                                      "    margin: 0px 0;                                         \n"
                                      "     left: 5px; right: 5px; \n"
                                      " }\n"
                                      "QSlider::handle:horizontal {                               \n"
                                      "     border: 0px ; \n"
                                      "     border-image: url(:/img/icon/圆.png);\n"
                                      "     width:15px;\n"
                                      "     margin: -7px -7px -7px -7px;                  \n"
                                      "} \n"
                                      "QSlider::add-page:horizontal{\n"
                                      "background: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #d9d9d9, stop:0.25 #d9d9d9, stop:0.5 #d9d9d9, stop:1 #d9d9d9); \n"
                                      "\n"
                                      "}\n"
                                      "QSlider::sub-page:horizontal{                               \n"
                                      " background: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #373737, stop:0.25 #373737, stop:0.5 #373737, stop:1 #373737);                     \n"
                                      "}")
        self.confSlider.setMaximum(100)
        self.confSlider.setProperty("value", 25)
        self.confSlider.setOrientation(QtCore.Qt.Horizontal)
        self.confSlider.setTickPosition(QtWidgets.QSlider.NoTicks)
        self.confSlider.setObjectName("confSlider")
        self.horizontalLayout_3.addWidget(self.confSlider)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        self.verticalLayout_8.addLayout(self.verticalLayout)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setContentsMargins(11, -1, 11, -1)
        self.verticalLayout_5.setSpacing(4)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.label_8 = QtWidgets.QLabel(self.groupBox_8)
        self.label_8.setMaximumSize(QtCore.QSize(80, 16777215))
        self.label_8.setStyleSheet("QLabel\n"
                                   "{\n"
                                   "    font-size: 18px;\n"
                                   "    font-family: \"Microsoft YaHei\";\n"
                                   "    font-weight: bold;\n"
                                   "         border-radius:9px;\n"
                                   "        background:rgba(66, 195, 255, 0);\n"
                                   "color: rgb(218, 218, 218);\n"
                                   "}\n"
                                   "")
        self.label_8.setObjectName("label_8")
        self.horizontalLayout_14.addWidget(self.label_8)
        self.checkBox = QtWidgets.QCheckBox(self.groupBox_8)
        self.checkBox.setStyleSheet("\n"
                                    "QCheckBox\n"
                                    "{font-size: 16px;\n"
                                    "    font-family: \"Microsoft YaHei\";\n"
                                    "    font-weight: bold;\n"
                                    "         border-radius:9px;\n"
                                    "        background:rgba(66, 195, 255, 0);\n"
                                    "color: rgb(218, 218, 218);;}\n"
                                    "\n"
                                    "QCheckBox::indicator {\n"
                                    "    width: 20px;\n"
                                    "    height: 20px;\n"
                                    "}\n"
                                    "QCheckBox::indicator:unchecked {\n"
                                    "    image: url(:/img/icon/button-off.png);\n"
                                    "}\n"
                                    "\n"
                                    "QCheckBox::indicator:checked {\n"
                                    "    \n"
                                    "    image: url(:/img/icon/button-on.png);\n"
                                    "}\n"
                                    "")
        self.checkBox.setChecked(True)
        self.checkBox.setObjectName("checkBox")
        self.horizontalLayout_14.addWidget(self.checkBox)
        self.verticalLayout_5.addLayout(self.horizontalLayout_14)
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setSpacing(5)
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.rateSpinBox = QtWidgets.QSpinBox(self.groupBox_8)
        self.rateSpinBox.setMinimumSize(QtCore.QSize(50, 0))
        self.rateSpinBox.setMaximumSize(QtCore.QSize(50, 16777215))
        self.rateSpinBox.setFocusPolicy(QtCore.Qt.ClickFocus)
        self.rateSpinBox.setStyleSheet("QSpinBox{\n"
                                       "background:rgba(200, 200, 200,50);\n"
                                       "color:white;\n"
                                       "font-size: 14px;\n"
                                       "font-family: \"Microsoft YaHei UI\";\n"
                                       "border-style: solid;\n"
                                       "border-width: 1px;\n"
                                       "border-color: rgba(200, 200, 200,100);\n"
                                       "border-radius: 3px;}\n"
                                       "\n"
                                       "QSpinBox::down-button{\n"
                                       "background:rgba(200, 200, 200,0);\n"
                                       "border-image: url(:/img/icon/箭头_列表展开.png);}\n"
                                       "QDoubleSpinBox::down-button::hover{\n"
                                       "background:rgba(200, 200, 200,100);\n"
                                       "border-image: url(:/img/icon/箭头_列表展开.png);}\n"
                                       "\n"
                                       "QSpinBox::up-button{\n"
                                       "background:rgba(200, 200, 200,0);\n"
                                       "border-image: url(:/img/icon/箭头_列表收起.png);}\n"
                                       "QSpinBox::up-button::hover{\n"
                                       "background:rgba(200, 200, 200,100);\n"
                                       "border-image: url(:/img/icon/箭头_列表收起.png);}\n"
                                       "")
        self.rateSpinBox.setMinimum(1)
        self.rateSpinBox.setMaximum(20)
        self.rateSpinBox.setSingleStep(1)
        self.rateSpinBox.setProperty("value", 1)
        self.rateSpinBox.setObjectName("rateSpinBox")
        self.horizontalLayout_13.addWidget(self.rateSpinBox)
        self.rateSlider = QtWidgets.QSlider(self.groupBox_8)
        self.rateSlider.setStyleSheet("QSlider{\n"
                                      "border-color: #bcbcbc;\n"
                                      "color:#d9d9d9;\n"
                                      "}\n"
                                      "QSlider::groove:horizontal {                                \n"
                                      "     border: 1px solid #999999;                             \n"
                                      "     height: 3px;                                           \n"
                                      "    margin: 0px 0;                                         \n"
                                      "     left: 5px; right: 5px; \n"
                                      " }\n"
                                      "QSlider::handle:horizontal {                               \n"
                                      "     border: 0px ; \n"
                                      "     border-image: url(:/img/icon/圆.png);\n"
                                      "     width:15px;\n"
                                      "     margin: -7px -7px -7px -7px;                  \n"
                                      "} \n"
                                      "QSlider::add-page:horizontal{\n"
                                      "background: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #d9d9d9, stop:0.25 #d9d9d9, stop:0.5 #d9d9d9, stop:1 #d9d9d9); \n"
                                      "\n"
                                      "}\n"
                                      "QSlider::sub-page:horizontal{                               \n"
                                      " background: qlineargradient(spread:pad, x1:0, y1:1, x2:0, y2:0, stop:0 #373737, stop:0.25 #373737, stop:0.5 #373737, stop:1 #373737);                     \n"
                                      "}")
        self.rateSlider.setMinimum(1)
        self.rateSlider.setMaximum(20)
        self.rateSlider.setSingleStep(1)
        self.rateSlider.setPageStep(1)
        self.rateSlider.setProperty("value", 1)
        self.rateSlider.setOrientation(QtCore.Qt.Horizontal)
        self.rateSlider.setTickPosition(QtWidgets.QSlider.NoTicks)
        self.rateSlider.setObjectName("rateSlider")
        self.horizontalLayout_13.addWidget(self.rateSlider)
        self.verticalLayout_5.addLayout(self.horizontalLayout_13)
        self.verticalLayout_8.addLayout(self.verticalLayout_5)
        self.groupBox_6 = QtWidgets.QGroupBox(self.groupBox_8)
        self.groupBox_6.setMinimumSize(QtCore.QSize(0, 0))
        self.groupBox_6.setMaximumSize(QtCore.QSize(16777215, 42))
        self.groupBox_6.setStyleSheet("#groupBox_6{\n"
                                      "border: 0px solid #42adff;\n"
                                      "border-radius:0px;}")
        self.groupBox_6.setTitle("")
        self.groupBox_6.setObjectName("groupBox_6")
        self.horizontalLayout_36 = QtWidgets.QHBoxLayout(self.groupBox_6)
        self.horizontalLayout_36.setContentsMargins(11, 0, 11, 0)
        self.horizontalLayout_36.setObjectName("horizontalLayout_36")
        self.saveCheckBox = QtWidgets.QCheckBox(self.groupBox_6)
        self.saveCheckBox.setStyleSheet("\n"
                                        "QCheckBox\n"
                                        "{font-size: 18px;\n"
                                        "    font-family: \"Microsoft YaHei\";\n"
                                        "    font-weight: bold;\n"
                                        "         border-radius:9px;\n"
                                        "        background:rgba(66, 195, 255, 0);\n"
                                        "color: rgb(218, 218, 218);;}\n"
                                        "\n"
                                        "QCheckBox::indicator {\n"
                                        "    width: 20px;\n"
                                        "    height: 20px;\n"
                                        "}\n"
                                        "QCheckBox::indicator:unchecked {\n"
                                        "    image: url(:/img/icon/button-off.png);\n"
                                        "}\n"
                                        "\n"
                                        "QCheckBox::indicator:checked {\n"
                                        "    \n"
                                        "    image: url(:/img/icon/button-on.png);\n"
                                        "}\n"
                                        "")
        self.saveCheckBox.setChecked(True)
        self.saveCheckBox.setObjectName("saveCheckBox")
        self.horizontalLayout_36.addWidget(self.saveCheckBox)
        self.verticalLayout_8.addWidget(self.groupBox_6)
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setContentsMargins(-1, 0, -1, 0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.groupBox_9 = QtWidgets.QGroupBox(self.groupBox_8)
        self.groupBox_9.setMinimumSize(QtCore.QSize(0, 42))
        self.groupBox_9.setMaximumSize(QtCore.QSize(16777215, 42))
        self.groupBox_9.setStyleSheet("#groupBox_9{\n"
                                      "border: 0px solid #42adff;\n"
                                      "border-top: 1px solid rgba(200, 200, 200,100);\n"
                                      "border-bottom: 1px solid rgba(200, 200, 200,100);\n"
                                      "border-radius:0px;}")
        self.groupBox_9.setTitle("")
        self.groupBox_9.setObjectName("groupBox_9")
        self.horizontalLayout_38 = QtWidgets.QHBoxLayout(self.groupBox_9)
        self.horizontalLayout_38.setContentsMargins(11, 0, 11, 0)
        self.horizontalLayout_38.setObjectName("horizontalLayout_38")
        self.label_11 = QtWidgets.QLabel(self.groupBox_9)
        self.label_11.setStyleSheet("QLabel\n"
                                    "{\n"
                                    "    font-size: 22px;\n"
                                    "    font-family: \"Microsoft YaHei\";\n"
                                    "    font-weight: bold;\n"
                                    "         border-radius:9px;\n"
                                    "        background:rgba(66, 195, 255, 0);\n"
                                    "color: rgb(218, 218, 218);\n"
                                    "}\n"
                                    "")
        self.label_11.setObjectName("label_11")
        self.horizontalLayout_38.addWidget(self.label_11)
        spacerItem2 = QtWidgets.QSpacerItem(37, 39, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_38.addItem(spacerItem2)
        self.verticalLayout_7.addWidget(self.groupBox_9)
        self.groupBox_10 = QtWidgets.QGroupBox(self.groupBox_8)
        self.groupBox_10.setMinimumSize(QtCore.QSize(0, 42))
        self.groupBox_10.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.groupBox_10.setStyleSheet("#groupBox_10{\n"
                                       "border: 0px solid #42adff;\n"
                                       "\n"
                                       "border-radius:0px;}")
        self.groupBox_10.setTitle("")
        self.groupBox_10.setObjectName("groupBox_10")
        self.horizontalLayout_39 = QtWidgets.QHBoxLayout(self.groupBox_10)
        self.horizontalLayout_39.setContentsMargins(11, 0, 11, 0)
        self.horizontalLayout_39.setObjectName("horizontalLayout_39")
        self.resultWidget = QtWidgets.QListWidget(self.groupBox_10)
        self.resultWidget.setStyleSheet("QListWidget{\n"
                                        "background-color: rgba(12, 28, 77, 0);\n"
                                        "\n"
                                        "border-radius:0px;\n"
                                        "font-family: \"Microsoft YaHei\";\n"
                                        "font-size: 16px;\n"
                                        "color: rgb(218, 218, 218);\n"
                                        "}\n"
                                        "")
        self.resultWidget.setObjectName("resultWidget")
        self.horizontalLayout_39.addWidget(self.resultWidget)
        self.verticalLayout_7.addWidget(self.groupBox_10)
        self.verticalLayout_7.setStretch(1, 1)
        self.verticalLayout_8.addLayout(self.verticalLayout_7)
        self.horizontalLayout_7.addWidget(self.groupBox_8)
        self.groupBox_201 = QtWidgets.QGroupBox(self.groupBox_18)
        self.groupBox_201.setStyleSheet("#groupBox_201{\n"
                                        "background-color: rgba(95, 95, 95, 200);\n"
                                        "border: 0px solid #42adff;\n"
                                        "border-left: 1px solid rgba(200, 200, 200,100);\n"
                                        "border-right: 0px solid rgba(29, 83, 185, 255);\n"
                                        "border-radius:0px;}")
        self.groupBox_201.setTitle("")
        self.groupBox_201.setObjectName("groupBox_201")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.groupBox_201)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.groupBox_3 = QtWidgets.QGroupBox(self.groupBox_201)
        self.groupBox_3.setMinimumSize(QtCore.QSize(0, 42))
        self.groupBox_3.setMaximumSize(QtCore.QSize(16777215, 42))
        self.groupBox_3.setStyleSheet("#groupBox_3{\n"
                                      "border: 0px solid #42adff;\n"
                                      "border-bottom: 1px solid rgba(200, 200, 200,100);\n"
                                      "border-radius:0px;}")
        self.groupBox_3.setTitle("")
        self.groupBox_3.setObjectName("groupBox_3")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.groupBox_3)
        self.horizontalLayout_6.setContentsMargins(11, 0, 11, 0)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.label_6 = QtWidgets.QLabel(self.groupBox_3)
        self.label_6.setMinimumSize(QtCore.QSize(0, 0))
        self.label_6.setMaximumSize(QtCore.QSize(16777215, 40))
        self.label_6.setStyleSheet("QLabel\n"
                                   "{\n"
                                   "    font-size: 22px;\n"
                                   "    font-family: \"Microsoft YaHei\";\n"
                                   "    font-weight: bold;\n"
                                   "         border-radius:9px;\n"
                                   "        background:rgba(66, 195, 255, 0);\n"
                                   "color: rgb(218, 218, 218);\n"
                                   "}\n"
                                   "")
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_6.addWidget(self.label_6)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem3)
        self.fps_label = QtWidgets.QLabel(self.groupBox_3)
        self.fps_label.setMinimumSize(QtCore.QSize(100, 40))
        self.fps_label.setMaximumSize(QtCore.QSize(100, 40))
        self.fps_label.setStyleSheet("QLabel\n"
                                     "{\n"
                                     "    font-size: 20px;\n"
                                     "    font-family: \"Microsoft YaHei\";\n"
                                     "    font-weight: bold;\n"
                                     "         border-radius:9px;\n"
                                     "        background:rgba(66, 195, 255, 0);\n"
                                     "color: rgb(218, 218, 218);\n"
                                     "}\n"
                                     "")
        self.fps_label.setText("")
        self.fps_label.setAlignment(QtCore.Qt.AlignCenter)
        self.fps_label.setObjectName("fps_label")
        self.horizontalLayout_6.addWidget(self.fps_label)
        self.verticalLayout_4.addWidget(self.groupBox_3)
        self.splitter = QtWidgets.QSplitter(self.groupBox_201)
        self.splitter.setEnabled(True)
        self.splitter.setStyleSheet("#splitter::handle{background: 1px solid  rgba(200, 200, 200,100);}")
        self.splitter.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.splitter.setLineWidth(10)
        self.splitter.setOrientation(QtCore.Qt.Horizontal)
        self.splitter.setHandleWidth(1)
        self.splitter.setObjectName("splitter")
        self.raw_video = Label_click_Mouse(self.splitter)
        self.raw_video.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.raw_video.sizePolicy().hasHeightForWidth())
        self.raw_video.setSizePolicy(sizePolicy)
        self.raw_video.setMinimumSize(QtCore.QSize(200, 0))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(36)
        self.raw_video.setFont(font)
        self.raw_video.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.raw_video.setStyleSheet("color: rgb(218, 218, 218);\n"
                                     "")
        self.raw_video.setText("")
        self.raw_video.setScaledContents(False)
        self.raw_video.setAlignment(QtCore.Qt.AlignCenter)
        self.raw_video.setObjectName("raw_video")
        self.out_video = Label_click_Mouse(self.splitter)
        self.out_video.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.out_video.sizePolicy().hasHeightForWidth())
        self.out_video.setSizePolicy(sizePolicy)
        self.out_video.setMinimumSize(QtCore.QSize(200, 0))
        font = QtGui.QFont()
        font.setFamily("微软雅黑")
        font.setPointSize(36)
        self.out_video.setFont(font)
        self.out_video.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.out_video.setStyleSheet("color: rgb(218, 218, 218);\n"
                                     "")
        self.out_video.setText("")
        self.out_video.setScaledContents(False)
        self.out_video.setAlignment(QtCore.Qt.AlignCenter)
        self.out_video.setObjectName("out_video")
        self.verticalLayout_4.addWidget(self.splitter)
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setContentsMargins(11, -1, 11, -1)
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.runButton = QtWidgets.QPushButton(self.groupBox_201)
        self.runButton.setMinimumSize(QtCore.QSize(40, 40))
        self.runButton.setStyleSheet("QPushButton {\n"
                                     "border-style: solid;\n"
                                     "border-width: 0px;\n"
                                     "border-radius: 0px;\n"
                                     "background-color: rgba(223, 223, 223, 0);\n"
                                     "}\n"
                                     "QPushButton::focus{outline: none;}\n"
                                     "QPushButton::hover {\n"
                                     "border-style: solid;\n"
                                     "border-width: 0px;\n"
                                     "border-radius: 0px;\n"
                                     "background-color: rgba(223, 223, 223, 150);}")
        self.runButton.setText("")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(":/img/icon/运行.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        icon7.addPixmap(QtGui.QPixmap(":/img/icon/暂停.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        icon7.addPixmap(QtGui.QPixmap(":/img/icon/运行.png"), QtGui.QIcon.Disabled, QtGui.QIcon.Off)
        icon7.addPixmap(QtGui.QPixmap(":/img/icon/暂停.png"), QtGui.QIcon.Disabled, QtGui.QIcon.On)
        icon7.addPixmap(QtGui.QPixmap(":/img/icon/运行.png"), QtGui.QIcon.Active, QtGui.QIcon.Off)
        icon7.addPixmap(QtGui.QPixmap(":/img/icon/暂停.png"), QtGui.QIcon.Active, QtGui.QIcon.On)
        icon7.addPixmap(QtGui.QPixmap(":/img/icon/运行.png"), QtGui.QIcon.Selected, QtGui.QIcon.Off)
        icon7.addPixmap(QtGui.QPixmap(":/img/icon/暂停.png"), QtGui.QIcon.Selected, QtGui.QIcon.On)
        self.runButton.setIcon(icon7)
        self.runButton.setIconSize(QtCore.QSize(30, 30))
        self.runButton.setCheckable(True)
        self.runButton.setObjectName("runButton")
        self.horizontalLayout_12.addWidget(self.runButton)
        self.progressBar = QtWidgets.QProgressBar(self.groupBox_201)
        self.progressBar.setMaximumSize(QtCore.QSize(16777215, 5))
        self.progressBar.setStyleSheet("QProgressBar{ color: rgb(255, 255, 255); font:12pt; border-radius:2px; text-align:center; border:none; background-color: rgba(215, 215, 215,100);} \n"
                                       "QProgressBar:chunk{ border-radius:0px; background: rgba(55, 55, 55, 200);}")
        self.progressBar.setMaximum(1000)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setTextVisible(False)
        self.progressBar.setObjectName("progressBar")
        self.horizontalLayout_12.addWidget(self.progressBar)
        self.stopButton = QtWidgets.QPushButton(self.groupBox_201)
        self.stopButton.setMinimumSize(QtCore.QSize(40, 40))
        self.stopButton.setStyleSheet("QPushButton {\n"
                                      "border-style: solid;\n"
                                      "border-width: 0px;\n"
                                      "border-radius: 0px;\n"
                                      "background-color: rgba(223, 223, 223, 0);\n"
                                      "}\n"
                                      "QPushButton::focus{outline: none;}\n"
                                      "QPushButton::hover {\n"
                                      "border-style: solid;\n"
                                      "border-width: 0px;\n"
                                      "border-radius: 0px;\n"
                                      "background-color: rgba(223, 223, 223, 150);}")
        self.stopButton.setText("")
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(":/img/icon/终止.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.stopButton.setIcon(icon8)
        self.stopButton.setIconSize(QtCore.QSize(30, 30))
        self.stopButton.setObjectName("stopButton")
        self.horizontalLayout_12.addWidget(self.stopButton)
        self.verticalLayout_4.addLayout(self.horizontalLayout_12)
        self.verticalLayout_4.setStretch(1, 1)
        self.horizontalLayout_7.addWidget(self.groupBox_201)
        self.verticalLayout_6.addLayout(self.horizontalLayout_7)
        self.groupBox_4 = QtWidgets.QGroupBox(self.groupBox_18)
        self.groupBox_4.setMinimumSize(QtCore.QSize(0, 30))
        self.groupBox_4.setMaximumSize(QtCore.QSize(16777215, 30))
        self.groupBox_4.setStyleSheet("#groupBox_4{\n"
                                      "background-color: rgba(75, 75, 75, 200);\n"
                                      "border: 0px solid #42adff;\n"
                                      "border-left: 0px solid rgba(29, 83, 185, 255);\n"
                                      "border-right: 0px solid rgba(29, 83, 185, 255);\n"
                                      "border-top: 1px solid rgba(200, 200, 200,100);\n"
                                      "border-radius:0px;}")
        self.groupBox_4.setTitle("")
        self.groupBox_4.setObjectName("groupBox_4")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.groupBox_4)
        self.horizontalLayout_10.setContentsMargins(-1, 0, -1, 0)
        self.horizontalLayout_10.setSpacing(0)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.statistic_label = QtWidgets.QLabel(self.groupBox_4)
        self.statistic_label.setMouseTracking(False)
        self.statistic_label.setStyleSheet("QLabel\n"
                                           "{\n"
                                           "    font-size: 16px;\n"
                                           "    font-family: \"Microsoft YaHei\";\n"
                                           "    font-weight: light;\n"
                                           "         border-radius:9px;\n"
                                           "        background:rgba(66, 195, 255, 0);\n"
                                           "color: rgb(218, 218, 218);\n"
                                           "}\n"
                                           "")
        self.statistic_label.setText("")
        self.statistic_label.setObjectName("statistic_label")
        self.horizontalLayout_10.addWidget(self.statistic_label)
        self.verticalLayout_6.addWidget(self.groupBox_4)
        self.verticalLayout_2.addWidget(self.groupBox_18)
        mainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(mainWindow)
        QtCore.QMetaObject.connectSlotsByName(mainWindow)

    def retranslateUi(self, mainWindow):
        _translate = QtCore.QCoreApplication.translate
        mainWindow.setWindowTitle(_translate("mainWindow", "海上风电叶片缺陷检测界面"))
        self.label_4.setText(_translate("mainWindow", "海上风机叶片缺陷检测系统"))
        # self.label_5.setText(_translate("mainWindow", "设置"))
        self.label_3.setText(_translate("mainWindow", "选择模型"))
        self.comboBox.setItemText(0, _translate("mainWindow", "yolov5CW.pt"))
        self.comboBox.setItemText(1, _translate("mainWindow", "yolov5m.pt"))
        self.comboBox.setItemText(2, _translate("mainWindow", "yolov5l.pt"))
        self.comboBox.setItemText(3, _translate("mainWindow", "yolov5x.pt"))
        self.label_10.setText(_translate("mainWindow", "输出"))
        self.screenButton.setToolTip(_translate("mainWindow", "屏幕捕获"))
        self.fileButton.setToolTip(_translate("mainWindow", "文件夹"))
        self.cameraButton.setToolTip(_translate("mainWindow", "本地摄像头"))
        self.rtspButton.setToolTip(_translate("mainWindow", "网络摄像头"))
        self.label_2.setText(_translate("mainWindow", "IoU"))
        self.label.setText(_translate("mainWindow", "conf"))
        self.label_8.setText(_translate("mainWindow", "latency"))
        self.checkBox.setText(_translate("mainWindow", "enable"))
        self.saveCheckBox.setText(_translate("mainWindow", "自动保存"))
        self.label_11.setText(_translate("mainWindow", "结果统计"))
        self.label_6.setText(_translate("mainWindow", "视图"))
class MainWindow(QMainWindow, Ui_mainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)
        self.setupUi(self)
        self.m_flag = False

        # style 1: window can be stretched
        self.setWindowFlags(Qt.CustomizeWindowHint | Qt.WindowStaysOnTopHint)

        # style 2: window can not be stretched
        # self.setWindowFlags(Qt.Window | Qt.FramelessWindowHint
        #                     | Qt.WindowSystemMenuHint | Qt.WindowMinimizeButtonHint | Qt.WindowMaximizeButtonHint)
        # self.setWindowOpacity(0.85)  # Transparency of window

        self.minButton.clicked.connect(self.showMinimized)
        self.maxButton.clicked.connect(self.max_or_restore)
        # show Maximized window
        self.maxButton.animateClick(10)
        self.closeButton.clicked.connect(self.close)

        self.qtimer = QTimer(self)
        self.qtimer.setSingleShot(True)
        self.qtimer.timeout.connect(lambda: self.statistic_label.clear())

        # search models automatically
        self.comboBox.clear()
        self.pt_list = os.listdir('./pt')
        self.pt_list = [file for file in self.pt_list if file.endswith('.pt')]
        self.pt_list.sort(key=lambda x: os.path.getsize('./pt/' + x))
        self.comboBox.clear()
        self.comboBox.addItems(self.pt_list)
        self.qtimer_search = QTimer(self)
        self.qtimer_search.timeout.connect(lambda: self.search_pt())
        self.qtimer_search.start(2000)

        # yolov5 thread
        self.det_thread = DetThread()
        self.model_type = self.comboBox.currentText()
        self.det_thread.weights = "./pt/%s" % self.model_type
        self.det_thread.source = '0'
        self.det_thread.percent_length = self.progressBar.maximum()
        self.det_thread.send_raw.connect(lambda x: self.show_image(x, self.raw_video))
        self.det_thread.send_img.connect(lambda x: self.show_image(x, self.out_video))
        self.det_thread.send_statistic.connect(self.show_statistic)
        self.det_thread.send_msg.connect(lambda x: self.show_msg(x))
        self.det_thread.send_percent.connect(lambda x: self.progressBar.setValue(x))
        self.det_thread.send_fps.connect(lambda x: self.fps_label.setText(x))


        self.wrjButton.clicked.connect(self.showWRJ)
        self.screenButton.clicked.connect(self.srceendetect)
        self.fileButton.clicked.connect(self.open_file)
        self.cameraButton.clicked.connect(self.chose_cam)
        self.rtspButton.clicked.connect(self.chose_rtsp)

        self.runButton.clicked.connect(self.run_or_continue)
        self.stopButton.clicked.connect(self.stop)
        self.stopButton.clicked.connect(self.stopsc)

        self.comboBox.currentTextChanged.connect(self.change_model)
        self.confSpinBox.valueChanged.connect(lambda x: self.change_val(x, 'confSpinBox'))
        self.confSlider.valueChanged.connect(lambda x: self.change_val(x, 'confSlider'))
        self.iouSpinBox.valueChanged.connect(lambda x: self.change_val(x, 'iouSpinBox'))
        self.iouSlider.valueChanged.connect(lambda x: self.change_val(x, 'iouSlider'))
        self.rateSpinBox.valueChanged.connect(lambda x: self.change_val(x, 'rateSpinBox'))
        self.rateSlider.valueChanged.connect(lambda x: self.change_val(x, 'rateSlider'))

        self.checkBox.clicked.connect(self.checkrate)
        self.saveCheckBox.clicked.connect(self.is_save)
        self.load_setting()

    def stopsc(self):
        global tclose
        self.statistic_label.setText("Finished")
        tclose = True

    def getScreenshot(self):
        mtop, mbot = 30, 50
        monitor = {"left": x0, "top": y0, "width": x1 - x0, "height": y1 - y0}
        img_src = np.array(mss.mss().grab(monitor))
        time.sleep(0.1)
        img_src = img_src[:, :, :3]
        img_src = img_src[mtop:-mbot]
        return img_src, [x0, y0, x1, y1, mtop, mbot]

    def getMonitor(self):
        global img_src
        while True:
            while tsleep:
                time.sleep(1)
            img_src, _ = self.getScreenshot()
            if tclose:
                break
        print("t1 close")

    def yolov5Detect(self):
        global tclose , truning
        CV2.namedWindow("detectWindow", CV2.WINDOW_NORMAL)
        CV2.resizeWindow("detectWindow", x1 - x0, y1 - y0)
        CV2.moveWindow("detectWindow", 600, 600)
        device = select_device('cpu')
        model = attempt_load('./pt/yolov5CW.pt', map_location=device)
        truning = True
        while True:
            while tsleep:
                time.sleep(1)
            img = img_src.copy()
            im0 = self.getDetection(img,model)
            CV2.imshow("detectWindow", im0)
            if (CV2.waitKey(1) & 0xFF == ord("q")) | tclose:
                # 就会销毁窗口并退出循环，否则继续下一次循环。
                CV2.destroyAllWindows()
                tclose=True
                truning=False
                self.runButton.setChecked(False)
                break
        print("t2 close")
    def getDetection(self,img,model):
        im3 = img.copy()
        device = torch.device("cuda")
        half = False
        augment = False
        half &= device.type != 'cpu'
        img0 = cv2.flip(img, 1)  # flip left-right
        img = letterbox(img0, 640, 32)[0]
        img = img.transpose((2, 0, 1))[::-1]  # HWC to CHW, BGR to RGB
        img = np.ascontiguousarray(img)

        img = torch.from_numpy(img).to(device)
        img = img.half() if half else img.float()  # uint8 to fp16/32
        img /= 255.0  # 0 - 255 to 0.0 - 1.0
        if img.ndimension() == 3:
            img = img.unsqueeze(0)

        pred = model(img, augment=augment)[0]
        classes = None
        agnostic_nms = False
        hide_labels = False
        hide_conf = False
        max_det = 1000
        iou=0.3
        conf=0.3
        a = model.module.names if hasattr(model, 'module') else model.names  # get class names
        names = list(a.values())
        statistic_dic = {name: 0 for name in names}
        iou = self.iouSpinBox.value()
        conf = self.confSpinBox.value()
        pred = non_max_suppression(pred,conf, iou, classes, agnostic_nms,
                                   max_det=max_det)
        bboxes = []
        for i, det in enumerate(pred):  # detections per image
            annotator = Annotator(im3, line_width=3, example=str(names))
            if len(det):
                # Rescale boxes from img_size to im0 size
                det[:, :4] = scale_coords(img.shape[2:], det[:, :4], im3.shape).round()

                # Write results
                for *xyxy, conf, cls in reversed(det):
                    c = int(cls)  # integer class
                    statistic_dic[names[c]] += 1
                    label = None if hide_labels else (names[c] if hide_conf else f'{names[c]} {conf:.2f}')
                    annotator.box_label(xyxy, label, color=colors(c, True))
        im0 = annotator.result()
        self.det_thread.send_statistic.emit(statistic_dic)
        self.det_thread.send_img.emit(im0)
        self.det_thread.send_raw.emit(im3 if isinstance(im3, np.ndarray) else im3[0])
        return im0


    def srceendetect(self):
        global x0, y0, x1, y1 , tclose, truning
        if truning:
            tclose = True
        with mss.mss() as sct:
            # 获取屏幕信息
            monitor = sct.monitors[1]  # 如果您有多个显示器，请根据实际情况选择要截取的显示器索引
            # 获取屏幕截图
            screenshot = np.array(sct.grab(monitor))
        x0, y0, x1, y1 = boxScreen(screenshot)
        source = 'screenCapture'
        self.statistic_msg('Detecting >> model：{}，file：{}'.
                           format(os.path.basename(self.det_thread.weights),
                                  source))
        self.runButton.setChecked(True)

        tclose = False
        t1 = threading.Thread(target=self.getMonitor, args=())
        t1.start()
        t2 = threading.Thread(target=self.yolov5Detect, args=())
        t2.start()

    def search_pt(self):
        pt_list = os.listdir('./pt')
        pt_list = [file for file in pt_list if file.endswith('.pt')]
        pt_list.sort(key=lambda x: os.path.getsize('./pt/' + x))

        if pt_list != self.pt_list:
            self.pt_list = pt_list
            self.comboBox.clear()
            self.comboBox.addItems(self.pt_list)

    def is_save(self):
        if self.saveCheckBox.isChecked():
            self.det_thread.save_fold = './result'
        else:
            self.det_thread.save_fold = None

    def checkrate(self):
        if self.checkBox.isChecked():
            self.det_thread.rate_check = True
        else:
            self.det_thread.rate_check = False

    def chose_rtsp(self):
        self.rtsp_window = Window()
        config_file = 'config/ip.json'
        if not os.path.exists(config_file):
            ip = "rtsp://admin:admin888@192.168.1.67:555"
            new_config = {"ip": ip}
            new_json = json.dumps(new_config, ensure_ascii=False, indent=2)
            with open(config_file, 'w', encoding='utf-8') as f:
                f.write(new_json)
        else:
            config = json.load(open(config_file, 'r', encoding='utf-8'))
            ip = config['ip']
        self.rtsp_window.rtspEdit.setText(ip)
        self.rtsp_window.show()
        self.rtsp_window.rtspButton.clicked.connect(lambda: self.load_rtsp(self.rtsp_window.rtspEdit.text()))

    def load_rtsp(self, ip):
        try:
            self.stop()
            MessageBox(
                self.closeButton, title='Tips', text='Loading rtsp stream', time=1000, auto=True).exec_()
            self.det_thread.source = ip
            new_config = {"ip": ip}
            new_json = json.dumps(new_config, ensure_ascii=False, indent=2)
            with open('config/ip.json', 'w', encoding='utf-8') as f:
                f.write(new_json)
            self.statistic_msg('Loading rtsp：{}'.format(ip))
            self.rtsp_window.close()
        except Exception as e:
            self.statistic_msg('%s' % e)

    def chose_cam(self):
        try:
            self.stop()
            MessageBox(
                self.closeButton, title='Tips', text='Loading camera', time=2000, auto=True).exec_()
            # get the number of local cameras
            _, cams = Camera().get_cam_num()
            popMenu = QMenu()
            popMenu.setFixedWidth(self.cameraButton.width())
            popMenu.setStyleSheet('''
                                            QMenu {
                                            font-size: 16px;
                                            font-family: "Microsoft YaHei UI";
                                            font-weight: light;
                                            color:white;
                                            padding-left: 5px;
                                            padding-right: 5px;
                                            padding-top: 4px;
                                            padding-bottom: 4px;
                                            border-style: solid;
                                            border-width: 0px;
                                            border-color: rgba(255, 255, 255, 255);
                                            border-radius: 3px;
                                            background-color: rgba(200, 200, 200,50);}
                                            ''')

            for cam in cams:
                exec("action_%s = QAction('%s')" % (cam, cam))
                exec("popMenu.addAction(action_%s)" % cam)

            x = self.groupBox_5.mapToGlobal(self.cameraButton.pos()).x()
            y = self.groupBox_5.mapToGlobal(self.cameraButton.pos()).y()
            y = y + self.cameraButton.frameGeometry().height()
            pos = QPoint(x, y)
            action = popMenu.exec_(pos)
            if action:
                self.det_thread.source = action.text()
                self.statistic_msg('Loading camera：{}'.format(action.text()))
        except Exception as e:
            self.statistic_msg('%s' % e)

    def load_setting(self):
        config_file = 'config/setting.json'
        if not os.path.exists(config_file):
            iou = 0.26
            conf = 0.33
            rate = 10
            check = 0
            savecheck = 0
            new_config = {"iou": iou,
                          "conf": conf,
                          "rate": rate,
                          "check": check,
                          "savecheck": savecheck
                          }
            new_json = json.dumps(new_config, ensure_ascii=False, indent=2)
            with open(config_file, 'w', encoding='utf-8') as f:
                f.write(new_json)
        else:
            config = json.load(open(config_file, 'r', encoding='utf-8'))
            if len(config) != 5:
                iou = 0.26
                conf = 0.33
                rate = 10
                check = 0
                savecheck = 0
            else:
                iou = config['iou']
                conf = config['conf']
                rate = config['rate']
                check = config['check']
                savecheck = config['savecheck']
        self.confSpinBox.setValue(conf)
        self.iouSpinBox.setValue(iou)
        self.rateSpinBox.setValue(rate)
        self.checkBox.setCheckState(check)
        self.det_thread.rate_check = check
        self.saveCheckBox.setCheckState(savecheck)
        self.is_save()


    def change_val(self, x, flag):
        if flag == 'confSpinBox':
            self.confSlider.setValue(int(x * 100))
        elif flag == 'confSlider':
            self.confSpinBox.setValue(x / 100)
            self.det_thread.conf_thres = x / 100
        elif flag == 'iouSpinBox':
            self.iouSlider.setValue(int(x * 100))
        elif flag == 'iouSlider':
            self.iouSpinBox.setValue(x / 100)
            self.det_thread.iou_thres = x / 100
        elif flag == 'rateSpinBox':
            self.rateSlider.setValue(x)
        elif flag == 'rateSlider':
            self.rateSpinBox.setValue(x)
            self.det_thread.rate = x * 10
        else:
            pass

    def statistic_msg(self, msg):
        self.statistic_label.setText(msg)
        # self.qtimer.start(3000)

    def show_msg(self, msg):
        self.runButton.setChecked(Qt.Unchecked)
        self.statistic_msg(msg)
        if msg == "Finished":
            self.saveCheckBox.setEnabled(True)

    def change_model(self, x):
        self.model_type = self.comboBox.currentText()
        self.det_thread.weights = "./pt/%s" % self.model_type
        self.statistic_msg('Change model to %s' % x)

    def open_file(self):

        config_file = 'config/fold.json'
        # config = json.load(open(config_file, 'r', encoding='utf-8'))
        config = json.load(open(config_file, 'r', encoding='utf-8'))
        open_fold = config['open_fold']
        if not os.path.exists(open_fold):
            open_fold = os.getcwd()
        name, _ = QFileDialog.getOpenFileName(self, 'Video/image', open_fold, "Pic File(*.mp4 *.mkv *.avi *.flv "
                                                                              "*.jpg *.png)")
        if name:
            self.det_thread.source = name
            self.statistic_msg('Loaded file：{}'.format(os.path.basename(name)))
            config['open_fold'] = os.path.dirname(name)
            config_json = json.dumps(config, ensure_ascii=False, indent=2)
            with open(config_file, 'w', encoding='utf-8') as f:
                f.write(config_json)
            self.stop()

    def max_or_restore(self):
        if self.maxButton.isChecked():
            self.showMaximized()
        else:
            self.showNormal()

    def run_or_continue(self):
        global tsleep
        self.det_thread.jump_out = False
        print("1")
        print(self.runButton.isChecked())
        print(truning)
        if (self.runButton.isChecked()==True) & (truning == False):
            self.saveCheckBox.setEnabled(False)
            self.det_thread.is_continue = True
            if not self.det_thread.isRunning():
                self.det_thread.start()
            source = os.path.basename(self.det_thread.source)
            source = 'camera' if source.isnumeric() else source
            self.statistic_msg('Detecting >> model：{}，file：{}'.
                               format(os.path.basename(self.det_thread.weights),
                                      source))
        else:
            if((self.runButton.isChecked()==False) & (truning == True)):
                self.statistic_msg('Pause')
                tsleep=True
            elif((self.runButton.isChecked()==True) & (truning == True)):
                tsleep=False
                source='screenCapture'
                self.statistic_msg('Detecting >> model：{}，file：{}'.
                                   format(os.path.basename(self.det_thread.weights),
                                          source))
            else :
                self.det_thread.is_continue = False
                self.statistic_msg('Pause')

    def stop(self):
        self.det_thread.jump_out = True
        self.saveCheckBox.setEnabled(True)

    def mousePressEvent(self, event):
        self.m_Position = event.pos()
        if event.button() == Qt.LeftButton:
            if 0 < self.m_Position.x() < self.groupBox.pos().x() + self.groupBox.width() and \
                    0 < self.m_Position.y() < self.groupBox.pos().y() + self.groupBox.height():
                self.m_flag = True

    def mouseMoveEvent(self, QMouseEvent):
        if Qt.LeftButton and self.m_flag:
            self.move(QMouseEvent.globalPos() - self.m_Position)

    def mouseReleaseEvent(self, QMouseEvent):
        self.m_flag = False

    @staticmethod
    def show_image(img_src, label):
        try:
            ih, iw, _ = img_src.shape
            w = label.geometry().width()
            h = label.geometry().height()
            # keep original aspect ratio
            if iw / w > ih / h:
                scal = w / iw
                nw = w
                nh = int(scal * ih)
                img_src_ = cv2.resize(img_src, (nw, nh))

            else:
                scal = h / ih
                nw = int(scal * iw)
                nh = h
                img_src_ = cv2.resize(img_src, (nw, nh))

            frame = cv2.cvtColor(img_src_, cv2.COLOR_BGR2RGB)
            img = QImage(frame.data, frame.shape[1], frame.shape[0], frame.shape[2] * frame.shape[1],
                         QImage.Format_RGB888)
            label.setPixmap(QPixmap.fromImage(img))

        except Exception as e:
            print(repr(e))

    def show_statistic(self, statistic_dic):
        try:
            self.resultWidget.clear()
            statistic_dic = sorted(statistic_dic.items(), key=lambda x: x[1], reverse=True)
            statistic_dic = [i for i in statistic_dic if i[1] > 0]
            results = [' ' + str(i[0]) + '：' + str(i[1]) for i in statistic_dic]
            self.resultWidget.addItems(results)

        except Exception as e:
            print(repr(e))

    def closeEvent(self, event):
        self.det_thread.jump_out = True
        config_file = 'config/setting.json'
        config = dict()
        config['iou'] = self.confSpinBox.value()
        config['conf'] = self.iouSpinBox.value()
        config['rate'] = self.rateSpinBox.value()
        config['check'] = self.checkBox.checkState()
        config['savecheck'] = self.saveCheckBox.checkState()
        config_json = json.dumps(config, ensure_ascii=False, indent=2)
        with open(config_file, 'w', encoding='utf-8') as f:
            f.write(config_json)
        MessageBox(
            self.closeButton, title='Tips', text='Closing the program', time=2000, auto=True).exec_()
        sys.exit(0)

    def showWRJ(self):
        self.win = wrjGPS()
        self.win.show()
class DetThread(QThread):
    send_img = pyqtSignal(np.ndarray)
    send_raw = pyqtSignal(np.ndarray)
    send_statistic = pyqtSignal(dict)
    # emit：detecting/pause/stop/finished/error msg
    send_msg = pyqtSignal(str)
    send_percent = pyqtSignal(int)
    send_fps = pyqtSignal(str)
    send_bboxes = pyqtSignal(np.ndarray)

    def __init__(self):
        super(DetThread, self).__init__()
        self.weights = './pt/yolov5CW.pt'
        self.current_weight = './pt/yolov5CW.pt'
        self.source = '0'
        self.conf_thres = 0.25
        self.iou_thres = 0.45
        self.jump_out = False  # jump out of the loop
        self.is_continue = True  # continue/pause
        self.percent_length = 1000  # progress bar
        self.rate_check = True  # Whether to enable delay
        self.rate = 100
        self.save_fold = './result'

    @torch.no_grad()
    def run(self,
            imgsz=640,  # inference size (pixels)
            max_det=1000,  # maximum detections per image
            device='cpu',  # cuda device, i.e. 0 or 0,1,2,3 or cpu
            view_img=True,  # show results
            save_txt=False,  # save results to *.txt
            save_conf=False,  # save confidences in --save-txt labels
            save_crop=False,  # save cropped prediction boxes
            nosave=False,  # do not save images/videos
            classes=None,  # filter by class: --class 0, or --class 0 2 3
            agnostic_nms=False,  # class-agnostic NMS
            augment=False,  # augmented inference
            visualize=False,  # visualize features
            update=False,  # update all models
            project='runs/detect',  # save results to project/name
            name='exp',  # save results to project/name
            exist_ok=False,  # existing project/name ok, do not increment
            line_thickness=3,  # bounding box thickness (pixels)
            hide_labels=False,  # hide labels
            hide_conf=False,  # hide confidences
            half=False,  # use FP16 half-precision inference
            ):

        # Initialize
        try:
            device = select_device(device)
            half &= device.type != 'cpu'  # half precision only supported on CUDA

            # Load model
            model = attempt_load(self.weights, map_location=device)  # load FP32 model
            num_params = 0
            for param in model.parameters():
                num_params += param.numel()
            stride = int(model.stride.max())  # model stride
            imgsz = check_img_size(imgsz, s=stride)  # check image size
            a = model.module.names if hasattr(model, 'module') else model.names  # get class names
            print(a)
            names = list(a.values())
            print(names)
            if half:
                model.half()  # to FP16

            # Dataloader
            if self.source.isnumeric() or self.source.lower().startswith(('rtsp://', 'rtmp://', 'http://', 'https://')):
                view_img = check_imshow()
                cudnn.benchmark = True  # set True to speed up constant image size inference
                dataset = LoadWebcam(self.source, img_size=imgsz, stride=stride)
                # bs = len(dataset)  # batch_size
            else:
                dataset = LoadImages(self.source, img_size=imgsz, stride=stride)

            # Run inference
            if device.type != 'cpu':
                model(torch.zeros(1, 3, imgsz, imgsz).to(device).type_as(next(model.parameters())))  # run once
            count = 0
            jump_count = 0
            start_time = time.time()
            dataset = iter(dataset)

            while True:
                if self.jump_out:
                    self.vid_cap.release()
                    self.send_percent.emit(0)
                    self.send_msg.emit('Stop')
                    if hasattr(self, 'out'):
                        self.out.release()
                    break
                # change model
                if self.current_weight != self.weights:
                    # Load model
                    model = attempt_load(self.weights, map_location=device)  # load FP32 model
                    num_params = 0
                    for param in model.parameters():
                        num_params += param.numel()
                    stride = int(model.stride.max())  # model stride
                    imgsz = check_img_size(imgsz, s=stride)  # check image size
                    names = model.module.names if hasattr(model, 'module') else model.names  # get class names
                    if half:
                        model.half()  # to FP16
                    # Run inference
                    if device.type != 'cpu':
                        model(torch.zeros(1, 3, imgsz, imgsz).to(device).type_as(next(model.parameters())))  # run once
                    self.current_weight = self.weights
                if self.is_continue:
                    path, img, im0s, self.vid_cap = next(dataset)
                    # jump_count += 1
                    # if jump_count % 5 != 0:
                    #     continue
                    count += 1
                    if count % 30 == 0 and count >= 30:
                        fps = int(30 / (time.time() - start_time))
                        self.send_fps.emit('fps：' + str(fps))
                        start_time = time.time()
                    if self.vid_cap:
                        percent = int(count / self.vid_cap.get(cv2.CAP_PROP_FRAME_COUNT) * self.percent_length)
                        self.send_percent.emit(percent)
                    else:
                        percent = self.percent_length

                    statistic_dic = {name: 0 for name in names}
                    img = torch.from_numpy(img).to(device)
                    img = img.half() if half else img.float()  # uint8 to fp16/32
                    img /= 255.0  # 0 - 255 to 0.0 - 1.0
                    if img.ndimension() == 3:
                        img = img.unsqueeze(0)

                    pred = model(img, augment=augment)[0]

                    # Apply NMS
                    pred = non_max_suppression(pred, self.conf_thres, self.iou_thres, classes, agnostic_nms,
                                               max_det=max_det)
                    # Process detections
                    for i, det in enumerate(pred):  # detections per image
                        im0 = im0s.copy()
                        annotator = Annotator(im0, line_width=line_thickness, example=str(names))
                        if len(det):
                            # Rescale boxes from img_size to im0 size
                            det[:, :4] = scale_coords(img.shape[2:], det[:, :4], im0.shape).round()

                            # Write results
                            for *xyxy, conf, cls in reversed(det):
                                c = int(cls)  # integer class
                                statistic_dic[names[c]] += 1
                                label = None if hide_labels else (names[c] if hide_conf else f'{names[c]} {conf:.2f}')
                                annotator.box_label(xyxy, label, color=colors(c, True))

                    if self.rate_check:
                        time.sleep(1 / self.rate)
                    im0 = annotator.result()
                    self.send_img.emit(im0)
                    self.send_raw.emit(im0s if isinstance(im0s, np.ndarray) else im0s[0])
                    self.send_statistic.emit(statistic_dic)
                    if self.save_fold:
                        os.makedirs(self.save_fold, exist_ok=True)
                        if self.vid_cap is None:
                            save_path = os.path.join(self.save_fold,
                                                     time.strftime('%Y_%m_%d_%H_%M_%S',
                                                                   time.localtime()) + '.jpg')
                            cv2.imwrite(save_path, im0)
                        else:
                            if count == 1:
                                ori_fps = int(self.vid_cap.get(cv2.CAP_PROP_FPS))
                                if ori_fps == 0:
                                    ori_fps = 25
                                # width = int(self.vid_cap.get(cv2.CAP_PROP_FRAME_WIDTH))
                                # height = int(self.vid_cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
                                width, height = im0.shape[1], im0.shape[0]
                                save_path = os.path.join(self.save_fold,
                                                         time.strftime('%Y_%m_%d_%H_%M_%S', time.localtime()) + '.mp4')
                                self.out = cv2.VideoWriter(save_path, cv2.VideoWriter_fourcc(*"mp4v"), ori_fps,
                                                           (width, height))
                            self.out.write(im0)
                    if percent == self.percent_length:
                        print(count)
                        self.send_percent.emit(0)
                        self.send_msg.emit('finished')
                        if hasattr(self, 'out'):
                            self.out.release()
                        break

        except Exception as e:
            print('错误类型是', e.__class__.__name__)
            print('错误明细是', e)